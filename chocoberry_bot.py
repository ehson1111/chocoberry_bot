import asyncio
import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy import create_engine, Column, Integer, String, Float, ForeignKey, DateTime
from sqlalchemy.orm import declarative_base, sessionmaker, relationship
from datetime import datetime
from sqlalchemy.exc import IntegrityError

# –¢–∞–Ω–∑–∏–º–æ—Ç–∏ logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ë–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ —Ç–∞“ì–π–∏—Ä—ë–±–∞–Ω–¥–∞“≥–æ–∏ –º—É“≥–∏—Ç
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")
if not TOKEN:
    raise ValueError("BOT_TOKEN –¥–∞—Ä –º—É“≥–∏—Ç –º—É–∞–π—è–Ω –Ω–∞—à—É–¥–∞–∞—Å—Ç!")
if not GROUP_CHAT_ID:
    raise ValueError("GROUP_CHAT_ID –¥–∞—Ä –º—É“≥–∏—Ç –º—É–∞–π—è–Ω –Ω–∞—à—É–¥–∞–∞—Å—Ç!")

INSTAGRAM_URL = os.getenv("INSTAGRAM_URL")
TIKTOK_URL = os.getenv("TIKTOK_URL")




# –¢–∞–Ω–∑–∏–º–∏ –±–æ—Ç –≤–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –¢–∞–Ω–∑–∏–º–∏ SQLAlchemy
Base = declarative_base()
engine = create_engine("sqlite:///chocoberry.db", echo=False)
Session = sessionmaker(bind=engine)

# –ú–æ–¥–µ–ª“≥–æ
class Category(Base):
    __tablename__ = "category"
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, nullable=False, unique=True)
    image_id = Column(String, nullable=True)  # –ú–∞–π–¥–æ–Ω–∏ –Ω–∞–≤ –±–∞—Ä–æ–∏ —Ç–∞—Å–≤–∏—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    products = relationship("Product", back_populates="category")

class Product(Base):
    __tablename__ = "product"
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, nullable=False)
    description = Column(String)
    price = Column(Float, nullable=False)
    category_id = Column(Integer, ForeignKey("category.id"), nullable=True)
    category = relationship("Category", back_populates="products")
    image_id = Column(String, nullable=True)
    carts = relationship("Cart", back_populates="product")
    orders = relationship("Order", back_populates="product")

class User(Base):
    __tablename__ = "user"
    telegram_id = Column(Integer, primary_key=True)
    username = Column(String)
    first_name = Column(String)
    last_name = Column(String)
    language = Column(String, default="tj")
    profile = relationship("UserProfile", uselist=False, back_populates="user")
    carts = relationship("Cart", back_populates="user")
    cashback = relationship("Cashback", uselist=False, back_populates="user")
    orders = relationship("Order", back_populates="user")

class UserProfile(Base):
    __tablename__ = "userprofile"
    telegram_id = Column(Integer, ForeignKey("user.telegram_id"), primary_key=True)
    phone_number = Column(String)
    address = Column(String)
    user = relationship("User", back_populates="profile")

class Cart(Base):
    __tablename__ = "cart"
    id = Column(Integer, primary_key=True, autoincrement=True)
    telegram_id = Column(Integer, ForeignKey("user.telegram_id"))
    product_id = Column(Integer, ForeignKey("product.id"))
    quantity = Column(Integer, nullable=False)
    user = relationship("User", back_populates="carts")
    product = relationship("Product", back_populates="carts")

class Order(Base):
    __tablename__ = "order"
    id = Column(Integer, primary_key=True, autoincrement=True)
    telegram_id = Column(Integer, ForeignKey("user.telegram_id"))
    product_id = Column(Integer, ForeignKey("product.id"))
    quantity = Column(Integer, nullable=False)
    total = Column(Float, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    user = relationship("User", back_populates="orders")
    product = relationship("Product", back_populates="orders")

class Cashback(Base):
    __tablename__ = "cashback"
    telegram_id = Column(Integer, ForeignKey("user.telegram_id"), primary_key=True)
    amount = Column(Float, default=0.0)
    user = relationship("User", back_populates="cashback")

# –°–æ—Ö—Ç–∞–Ω–∏ “∑–∞–¥–≤–∞–ª“≥–æ
Base.metadata.create_all(engine)

# –ú–æ—à–∏–Ω“≥–æ–∏ –≤–∞–∑—ä–∏—è—Ç
class ProfileForm(StatesGroup):
    phone = State()
    address = State()

class AdminProductForm(StatesGroup):
    name = State()
    description = State()
    price = State()
    category = State()
    image = State()

class AdminOrderForm(StatesGroup):
    user = State()
    product = State()
    quantity = State()

class AdminCategoryForm(StatesGroup):
    name = State()
    image = State()  # “≤–æ–ª–∞—Ç–∏ –Ω–∞–≤ –±–∞—Ä–æ–∏ —Ç–∞—Å–≤–∏—Ä
    
class OrderConfirmation(StatesGroup):
    confirm_cashback = State()
    payment_method = State()  
    
class FeedbackForm(StatesGroup):
    feedback_text = State() 
    


class UpdateProductForm(StatesGroup):
    product_id = State()    # ID-–∏ –º–∞“≥—Å—É–ª–æ—Ç–∏ –∏–Ω—Ç–∏—Ö–æ–±—à—É–¥–∞
    name = State()         # –ù–æ–º–∏ –Ω–∞–≤
    description = State()  # –¢–∞–≤—Å–∏—Ñ–∏ –Ω–∞–≤
    price = State()        # –ù–∞—Ä—Ö–∏ –Ω–∞–≤
    category = State()     # –ö–∞—Ç–µ–≥–æ—Ä–∏—è–∏ –Ω–∞–≤
    image = State()        # –¢–∞—Å–≤–∏—Ä–∏ –Ω–∞–≤       
    
    
    
# –¢–∞—Ä“∑—É–º–∞“≥–æ
TRANSLATIONS = {
    "tj": {
        "welcome": "<b>üç´üçì –•—É—à –æ–º–∞–¥–µ–¥ –±–∞ ChocoBerry!</b>\n–Ø–∫ –∞–º–∞–ª—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        "choose_language": "–õ—É—Ç—Ñ–∞–Ω, –∑–∞–±–æ–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        "menu": "üç´ –ú–µ–Ω—é",
        "cart": "üõí –°–∞–±–∞–¥",
        "profile": "üë§ –ü—Ä–æ—Ñ–∏–ª",
        "cashback": "üí∞ –ö—ç—à–±—ç–∫",
        "order_history": "üìú –¢–∞—ä—Ä–∏—Ö–∏ —Ñ–∞—Ä–º–æ–∏—à“≥–æ",
        "admin_panel": "üîß –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω",
        "language_changed": "–ó–∞–±–æ–Ω –±–∞ {language} —Ç–∞“ì–π–∏—Ä —ë—Ñ—Ç! ‚úÖ",
        "no_orders": "–®—É–º–æ —è–≥–æ–Ω —Ñ–∞—Ä–º–æ–∏—à –Ω–∞–¥–æ—Ä–µ–¥! üòî –õ—É—Ç—Ñ–∞–Ω, –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –±–∞ —Å–∞–±–∞–¥ –∏–ª–æ–≤–∞ –∫—É–Ω–µ–¥ –≤–∞ —Ñ–∞—Ä–º–æ–∏—à –¥–∏“≥–µ–¥.",
        "product_added": "–ú–∞“≥—Å—É–ª–æ—Ç '{name}' <b>–∏–ª–æ–≤–∞ —à—É–¥!</b>",
        "choose_category": "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        "no_categories": "–Ø–≥–æ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç!",
        "product": "–ú–∞“≥—Å—É–ª–æ—Ç",
        "quantity": "–ú–∏“õ–¥–æ—Ä",
        "total": "“≤–∞–º–∞–≥”£",
        "date": "–°–∞–Ω–∞",
        "product_deleted": "–ú–∞“≥—Å—É–ª–æ—Ç —Ö–∞–∑—Ñ —à—É–¥–∞–∞—Å—Ç",
        "error": "–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥! üòû",
        "invalid_image": "–õ—É—Ç—Ñ–∞–Ω, —Ç–∞—Å–≤–∏—Ä –±–æ—Ä –∫—É–Ω–µ–¥ —ë /skip-—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥!",
        "product_exists": "–ú–∞“≥—Å—É–ª–æ—Ç –±–æ –Ω–æ–º–∏ '{name}' –∞–ª–ª–∞–∫–∞–π –º–∞–≤“∑—É–¥ –∞—Å—Ç! –õ—É—Ç—Ñ–∞–Ω, –Ω–æ–º–∏ –¥–∏–≥–∞—Ä –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥.",
        "add_another_product": "–ò–ª–æ–≤–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç–∏ –¥–∏–≥–∞—Ä",
        "back_to_admin": "–ë–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω",
        "next_action": "–ê–º–∞–ª–∏ –Ω–∞–≤–±–∞—Ç”£:",
        "add_to_cart_button": "üì• –ò–ª–æ–≤–∞ –±–∞ —Å–∞–±–∞–¥: {name}",
        "price": "–ù–∞—Ä—Ö",
        "no_access": "–®—É–º–æ –¥–∞—Å—Ç—Ä–∞—Å”£ –±–∞ –∏–Ω –∞–º–∞–ª –Ω–∞–¥–æ—Ä–µ–¥!",
        "manage_categories": "–ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –ö–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ",
        "cart_empty": "–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç! üõí",
        "profile_missing": "–õ—É—Ç—Ñ–∞–Ω, –∞–≤–≤–∞–ª –ø—Ä–æ—Ñ–∏–ª–∏ —Ö—É–¥—Ä–æ –ø—É—Ä –∫—É–Ω–µ–¥! üìã",
        "new_order": "üì¶ –§–∞—Ä–º–æ–∏—à–∏ –Ω–∞–≤",
        "user": "–ö–æ—Ä–±–∞—Ä",
        "phone": "–†–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω",
        "products": "–ú–∞“≥—Å—É–ª–æ—Ç“≥–æ",
        "cashback_earned": "–ö—ç—à–±—ç–∫–∏ –±–∞–¥–∞—Å—Ç–æ–≤–∞—Ä–¥–∞",
        "order_confirmed": "<b>‚úÖ –§–∞—Ä–º–æ–∏—à–∏ —à—É–º–æ —Ç–∞—Å–¥–∏“õ —à—É–¥!</b> –°–∞–±–∞–¥ —Ö–æ–ª”£ —à—É–¥.",
        "group_notification_error": "–•–∞—Ç–æ –¥–∞—Ä —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –æ–≥–æ“≥”£ –±–∞ –≥—É—Ä—É“≥: {error}",
        "product_not_found": "–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥! üòî",
        "confirm_delete_product": "<b>–û—ë —à—É–º–æ –º—É—Ç–º–∞–∏–Ω–µ–¥, –∫–∏ –º–µ—Ö–æ“≥–µ–¥ –º–∞“≥—Å—É–ª–æ—Ç–∏ '{name}'-—Ä–æ “≥–∞–∑—Ñ –∫—É–Ω–µ–¥?</b>\n–ò–Ω –∞–º–∞–ª —Å–∞–±–∞–¥“≥–æ –≤–∞ —Ñ–∞—Ä–º–æ–∏—à“≥–æ–∏ –º–∞—Ä–±—É—Ç—Ä–æ –Ω–∏–∑ –Ω–µ—Å—Ç –º–µ–∫—É–Ω–∞–¥!",
        "yes_delete": "‚úÖ –ë–∞–ª–µ, “≥–∞–∑—Ñ –∫—É–Ω",
        "no_cancel": "‚ùå –ù–µ, –±–µ–∫–æ—Ä –∫—É–Ω",
        "enter_new_phone": "–õ—É—Ç—Ñ–∞–Ω, —Ä–∞“õ–∞–º–∏ –Ω–∞–≤–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:",
        "address": "üè™ –ù—É“õ—Ç–∞“≥–æ–∏ —Ñ—É—Ä”Ø—à–∏ –º–æ:\n\n1. –î–æ–º –ü–µ—áa—Ç (–º–∞—Ä–∫–∞–∑–∏ —à–∞“≥—Ä)\n2. –ê—à–∞–Ω, –æ—à—ë–Ω–∞–∏ 3 (—Ñ—É–¥–∫–æ—Ä—Ç)\n3. –°–∏—ë–º–∞ –ú–æ–ª, –æ—à—ë–Ω–∞–∏ 2\n\nüïí –°–æ–∞—Ç“≥–æ–∏ –∫–æ—Ä”£: 10:00-23:00",
        "contacts": "üì± –¢–∞–º–æ—Å“≥–æ–∏ –º–æ:\n\n‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω –±–∞—Ä–æ–∏ —Ñ–∞—Ä–º–æ–∏—à:\n+992 900-58-52-49\n+992 877-80-80-02\n\nüí¨ “≤–∞—Ä –≤–∞“õ—Ç –±–∞ –º–æ –Ω–∞–≤–∏—Å–µ–¥!",
        "back_to_categories": "–ë–æ–∑–≥–∞—à—Ç –±–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ",
        "no_orders_admin": "–Ø–≥–æ–Ω —Ñ–∞—Ä–º–æ–∏—à –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç!",
        "order_list": "–†”Ø–π—Ö–∞—Ç–∏ —Ñ–∞—Ä–º–æ–∏—à“≥–æ",
        "total_all_orders": "–ú–∞–±–ª–∞“ì–∏ —É–º—É–º–∏–∏ —Ñ–∞—Ä–º–æ–∏—à“≥–æ",
        "cashback_used": "–ö—ç—à–±—ç–∫ –¥–∞—Ä “≥–∞“∑–º–∏ {amount:.2f} —Å–æ–º–æ–Ω”£ –∏—Å—Ç–∏—Ñ–æ–¥–∞ —à—É–¥!",
        "cashback_available": "–®—É–º–æ {amount:.2f} —Å–æ–º–æ–Ω”£ –∫—ç—à–±—ç–∫ –¥–æ—Ä–µ–¥. –û—ë –º–µ—Ö–æ“≥–µ–¥ –æ–Ω—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥?",
        "use_cashback": "–ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∫—ç—à–±—ç–∫",
        "skip_cashback": "–ë–µ –∫—ç—à–±—ç–∫ –∏–¥–æ–º–∞ –¥–∏“≥–µ–¥",
        "choose_payment_method": "–õ—É—Ç—Ñ–∞–Ω, —É—Å—É–ª–∏ –ø–∞—Ä–¥–æ—Ö—Ç—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        "payment_cash": "üíµ –ù–∞“õ–¥",
        "payment_card": "üí≥ –ö–æ—Ä—Ç–∏ –±–æ–Ω–∫”£",
        "payment_method_selected": "–£—Å—É–ª–∏ –ø–∞—Ä–¥–æ—Ö—Ç: {method} –∏–Ω—Ç–∏—Ö–æ–± —à—É–¥.",
        "order_details_payment": "–£—Å—É–ª–∏ –ø–∞—Ä–¥–æ—Ö—Ç: {method}",
        "feedback": "üìù –§–∏–∫—Ä—É –º—É–ª–æ“≥–∏–∑–∞",
        "send_feedback": "–õ—É—Ç—Ñ–∞–Ω, —Ñ–∏–∫—Ä—É –º—É–ª–æ“≥–∏–∑–∞–∏ —Ö—É–¥—Ä–æ –Ω–∞–≤–∏—Å–µ–¥:",
        "feedback_sent": "‚úÖ –§–∏–∫—Ä—É –º—É–ª–æ“≥–∏–∑–∞–∏ —à—É–º–æ –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥! –¢–∞—à–∞–∫–∫—É—Ä –±–∞—Ä–æ–∏ –±–æ–∑–≥–∞—à—Ç.",
        "feedback_empty": "–õ—É—Ç—Ñ–∞–Ω, –º–∞—Ç–Ω–∏ —Ñ–∏–∫—Ä—É –º—É–ª–æ“≥–∏–∑–∞–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥!",
        "feedback_notification": "üìù –§–∏–∫—Ä—É –º—É–ª–æ“≥–∏–∑–∞–∏ –Ω–∞–≤\n\nüë§ –ö–æ—Ä–±–∞—Ä: {first_name} (@{username})\nüìú –ú–∞—Ç–Ω: {feedback_text}\nüìÖ –°–∞–Ω–∞: {date}",
        "social_media": "üåê –ú–æ –¥–∞—Ä —à–∞–±–∞–∫–∞“≥–æ–∏ –∏“∑—Ç–∏–º–æ”£",
        "social_media_links": "üì± –ë–æ –º–æ –¥–∞—Ä —à–∞–±–∞–∫–∞“≥–æ–∏ –∏“∑—Ç–∏–º–æ”£ –ø–∞–π–≤–∞—Å—Ç —à–∞–≤–µ–¥:\n\nüì∏ <a href='{instagram_url}'>Instagram</a>\nüé• <a href='{tiktok_url}'>TikTok</a>",
        "address": "üè™ –°—É—Ä–æ“ì–∞",
        "contacts": "üì± –ö–æ–Ω—Ç–∞–∫—Ç“≥–æ",
        "address_text": "üè™ –ù—É“õ—Ç–∞“≥–æ–∏ —Ñ—É—Ä”Ø—à–∏ –º–æ:\n\n1. –î–æ–º –ü–µ—á–∞—Ç—å (–º–∞—Ä–∫–∞–∑–∏ —à–∞“≥—Ä)\n2. –ê—à–∞–Ω, –æ—à—ë–Ω–∞–∏ 3 (—Ñ—É–¥–∫–æ—Ä—Ç)\n3. –°–∏—ë–º–∞ –ú–æ–ª, –æ—à—ë–Ω–∞–∏ 2\n\nüïí –°–æ–∞—Ç“≥–æ–∏ –∫–æ—Ä”£: 10:00-23:00",
        "contacts_text": "üì± –¢–∞–º–æ—Å“≥–æ–∏ –º–æ:\n\n‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω –±–∞—Ä–æ–∏ —Ñ–∞—Ä–º–æ–∏—à:\n+992 900-58-52-49\n+992 877-80-80-02\n\nüí¨ “≤–∞—Ä –≤–∞“õ—Ç –±–∞ –º–æ –Ω–∞–≤–∏—Å–µ–¥!",
        "admin_update_product": "üìù –ù–∞–≤—Å–æ–∑–∏–∏ –ú–∞“≥—Å—É–ª–æ—Ç",
        "select_product_to_update": "–ú–∞“≥—Å—É–ª–æ—Ç–µ—Ä–æ –±–∞—Ä–æ–∏ –Ω–∞–≤—Å–æ–∑”£ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        "no_products": "–ú–∞“≥—Å—É–ª–æ—Ç –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç!",
        "update_product_name": "–ù–æ–º–∏ –Ω–∞–≤–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:",
        "update_product_description": "–¢–∞–≤—Å–∏—Ñ–∏ –Ω–∞–≤–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–∏—Ö—Ç–∏—ë—Ä”£, –±–∞—Ä–æ–∏ –≥—É–∑–∞—à—Ç–∞–Ω '‚è≠ –ì—É–∑–∞—à—Ç–∞–Ω' –Ω–∞–≤–∏—Å–µ–¥):",
        "update_product_price": "–ù–∞—Ä—Ö–∏ –Ω–∞–≤–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–±–æ —Å–æ–º–æ–Ω”£):",
        "update_product_category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è–∏ –Ω–∞–≤–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        "update_product_image": "–¢–∞—Å–≤–∏—Ä–∏ –Ω–∞–≤–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –±–æ—Ä –∫—É–Ω–µ–¥ (–∏—Ö—Ç–∏—ë—Ä”£, –±–∞—Ä–æ–∏ –≥—É–∑–∞—à—Ç–∞–Ω '‚è≠ –ì—É–∑–∞—à—Ç–∞–Ω' –Ω–∞–≤–∏—Å–µ–¥):",
        "product_updated": "‚úÖ –ú–∞“≥—Å—É–ª–æ—Ç –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –Ω–∞–≤—Å–æ–∑”£ —à—É–¥!",
        "invalid_price": "–ù–∞—Ä—Ö–∏ –Ω–æ–¥—É—Ä—É—Å—Ç! –õ—É—Ç—Ñ–∞–Ω, —Ä–∞“õ–∞–º–∏ –º—É—Å–±–∞—Ç –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.",
        "skip": "‚è≠ –ì—É–∑–∞—à—Ç–∞–Ω",
        "no_access": "üö´ –®—É–º–æ –¥–∞—Å—Ç—Ä–∞—Å”£ –±–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω –Ω–∞–¥–æ—Ä–µ–¥!",
        "invalid_phone": "–†–∞“õ–∞–º–∏ –Ω–æ–¥—É—Ä—É—Å—Ç! {error}",
        "enter_address": "–õ—É—Ç—Ñ–∞–Ω, —Å—É—Ä–æ“ì–∞—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:",
        "add_product" : "‚ûï –ò–ª–æ–≤–∞–∏ –ú–∞“≥—Å—É–ª–æ—Ç",
        "delete_product": "üóë “≤–∞–∑—Ñ–∏ –ú–∞“≥—Å—É–ª–æ—Ç",
        "add_order": "üì¶ –ò–ª–æ–≤–∞–∏ –§–∞—Ä–º–æ–∏—à",
        "view_orders": "üìú –†”Ø–π—Ö–∞—Ç–∏ –§–∞—Ä–º–æ–∏—à“≥–æ",
        "select_action": "–ê–º–∞–ª–∏ –¥–∏–ª—Ö–æ“≥—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥",
        "back_to_main": "üîô –ë–∞ –ú–µ–Ω—é–∏ –ê—Å–æ—Å”£",
        "select_category_to_edit": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ä–æ –±–∞—Ä–æ–∏ —Ç–∞“≥—Ä–∏—Ä –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        "back_to_manage_categories": "üîô –ë–æ–∑–≥–∞—à—Ç –±–∞ –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ",    
        "contact_info": "üìç –ú–∞—ä–ª—É–º–æ—Ç –±–∞—Ä–æ–∏ —Ç–∞–º–æ—Å",
        "choose_contact_info": "–õ—É—Ç—Ñ–∞–Ω, –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥: —Å—É—Ä–æ“ì–∞ —ë –∫–æ–Ω—Ç–∞–∫—Ç“≥–æ",
        "welcome_intro": "üìã –ë–æ –º–æ —à—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥:\n- –ú–∞“≥—Å—É–ª–æ—Ç—Ä–æ –∞–∑ –º–µ–Ω—é –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥\n- –§–∞—Ä–º–æ–∏—à –¥–∏“≥–µ–¥ –≤–∞ –∫—ç—à–±—ç–∫ –±–∞ –¥–∞—Å—Ç –æ—Ä–µ–¥\n- –ü—Ä–æ—Ñ–∏–ª–∏ —Ö—É–¥—Ä–æ –∏–¥–æ—Ä–∞ –∫—É–Ω–µ–¥\n- –ë–æ –º–æ –¥–∞—Ä —Ç–∞–º–æ—Å —à–∞–≤–µ–¥" ,
        "cashback_info": "üìå –ê–≥–∞—Ä –∫—ç—à–±—ç–∫ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –∫—É–Ω–µ–¥, –º–∞–±–ª–∞“ì–∏ —Ñ–∞—Ä–º–æ–∏—à ({total:.2f} —Å–æ–º–æ–Ω) –∫–∞–º –º–µ—à–∞–≤–∞–¥.",
        "address_text": "üè™ –ù—É“õ—Ç–∞“≥–æ–∏ —Ñ—É—Ä”Ø—à–∏ –º–æ:\n\n1. –î–æ–º –ü–µ—á–∞—Ç—å (–º–∞—Ä–∫–∞–∑–∏ —à–∞“≥—Ä)\n2. –ê—à–∞–Ω, –æ—à—ë–Ω–∞–∏ 3 (—Ñ—É–¥–∫–æ—Ä—Ç)\n3. –°–∏—ë–º–∞ –ú–æ–ª, –æ—à—ë–Ω–∞–∏ 2\n\nüïí –°–æ–∞—Ç“≥–æ–∏ –∫–æ—Ä”£: 10:00-23:00",
        "contacts_text": "üì± –¢–∞–º–æ—Å“≥–æ–∏ –º–æ:\n\n‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω –±–∞—Ä–æ–∏ —Ñ–∞—Ä–º–æ–∏—à:\n+992 900-58-52-49\n+992 877-80-80-02\n\nüí¨ “≤–∞—Ä –≤–∞“õ—Ç –±–∞ –º–æ –Ω–∞–≤–∏—Å–µ–¥!",
        "choose_contact_info": "–õ—É—Ç—Ñ–∞–Ω, –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥: —Å—É—Ä–æ“ì–∞ —ë –∫–æ–Ω—Ç–∞–∫—Ç“≥–æ",
        "whatsapp_1": "üì± WhatsApp (+992900585249)",
        "whatsapp_2": "üì± WhatsApp (+992877808002)",
    },
    "ru": {
        "welcome": "<b>üç´üçì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChocoBerry!</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "choose_language": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "menu": "üç´ –ú–µ–Ω—é",
        "cart": "üõí –ö–æ—Ä–∑–∏–Ω–∞",
        "profile": "üë§ –ü—Ä–æ—Ñ–∏–ª—å",
        "cashback": "üí∞ –ö—ç—à–±—ç–∫",
        "order_history": "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤",
        "admin_panel": "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "language_changed": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {language}! ‚úÖ",
        "no_orders": "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤! üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑.",
        "product_added": "–¢–æ–≤–∞—Ä '{name}' <b>–¥–æ–±–∞–≤–ª–µ–Ω!</b>",
        "choose_category": "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        "no_categories": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π!",
        "product": "–¢–æ–≤–∞—Ä",
        "quantity": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        "total": "–ò—Ç–æ–≥–æ",
        "date": "–î–∞—Ç–∞",
        "product_deleted": "–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω",
        "error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üòû",
        "invalid_image": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /skip!",
        "product_exists": "–¢–æ–≤–∞—Ä —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
        "add_another_product": "–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä",
        "back_to_admin": "–í –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "next_action": "–°–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "add_to_cart_button": "üì• –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É: {name}",
        "price": "–¶–µ–Ω–∞",
        "no_access": "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é!",
        "manage_categories": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
        "cart_empty": "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! üõí",
        "profile_missing": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å! üìã",
        "new_order": "üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑",
        "user": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        "phone": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        "products": "–¢–æ–≤–∞—Ä—ã",
        "cashback_earned": "–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫—ç—à–±—ç–∫",
        "order_confirmed": "<b>‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!</b> –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.",
        "group_notification_error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {error}",
        "product_not_found": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω! üòî",
        "confirm_delete_product": "<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä '{name}'?</b>\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –∏ –∑–∞–∫–∞–∑—ã!",
        "yes_delete": "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
        "no_cancel": "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å",
        "enter_new_phone": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        "address": "üè™ –ù–∞—à–∏ –ø—É–Ω–∫—Ç—ã –ø—Ä–æ–¥–∞–∂:\n\n1. –î–æ–º –ø–µ—á–∞—Ç–∏ (—Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞)\n2. –ê—à–∞–Ω, 3 —ç—Ç–∞–∂ (—Ñ—É–¥–∫–æ—Ä—Ç)\n3. –°–∏—ë–º–∞ –ú–æ–ª, 2 —ç—Ç–∞–∂\n\nüïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: 10:00-23:00",
        "contacts": "üì± –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤:\n+992 900-58-52-49\n+992 877-80-80-02\n\nüí¨ –ü–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
        "back_to_categories": "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
        "no_orders_admin": "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤!",
        "order_list": "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤",
        "total_all_orders": "–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤",
        "cashback_used": "–ö—ç—à–±—ç–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount:.2f} —Å–æ–º–æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!",
        "cashback_available": "–£ –≤–∞—Å –µ—Å—Ç—å {amount:.2f} —Å–æ–º–æ–Ω–∏ –∫—ç—à–±—ç–∫–∞. –•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
        "use_cashback": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–±—ç–∫",
        "skip_cashback": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫—ç—à–±—ç–∫–∞",
        "choose_payment_method": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        "payment_cash": "üíµ –ù–∞–ª–∏—á–Ω—ã–µ",
        "payment_card": "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
        "payment_method_selected": "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {method} –≤—ã–±—Ä–∞–Ω.",
        "order_details_payment": "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {method}",
        "feedback": "üìù –û—Ç–∑—ã–≤",
        "send_feedback": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:",
        "feedback_sent": "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.",
        "feedback_empty": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞!",
        "feedback_notification": "üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} (@{username})\nüìú –¢–µ–∫—Å—Ç: {feedback_text}\nüìÖ –î–∞—Ç–∞: {date}",
        "social_media": "üåê –ú—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö",
        "social_media_links": "üì± –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö:\n\nüì∏ <a href='{instagram_url}'>Instagram</a>\nüé• <a href='{tiktok_url}'>TikTok</a>",
        "address": "üè™ –ê–¥—Ä–µ—Å",
        "contacts": "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "address_text": "üè™ –ù–∞—à–∏ –ø—É–Ω–∫—Ç—ã –ø—Ä–æ–¥–∞–∂:\n\n1. –î–æ–º –ø–µ—á–∞—Ç–∏ (—Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞)\n2. –ê—à–∞–Ω, 3 —ç—Ç–∞–∂ (—Ñ—É–¥–∫–æ—Ä—Ç)\n3. –°–∏—ë–º–∞ –ú–æ–ª, 2 —ç—Ç–∞–∂\n\nüïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: 10:00-23:00",
        "contacts_text": "üì± –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤:\n+992 900-58-52-49\n+992 877-80-80-02\n\nüí¨ –ü–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
        "admin_update_product": "üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ü—Ä–æ–¥—É–∫—Ç–∞",
        "select_product_to_update": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
        "no_products": "–ü—Ä–æ–¥—É–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!",
        "update_product_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:",
        "update_product_description": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        "update_product_price": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞ (–≤ —Å–æ–º–æ–Ω–∏):",
        "update_product_category": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:",
        "update_product_image": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        "product_updated": "‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
        "invalid_price": "–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
        "skip": "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "no_access": "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞!",   
        "invalid_phone": "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! {error}",
        "enter_address": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:",
        "add_product": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ü—Ä–æ–¥—É–∫—Ç",
        "delete_product": "üóë –£–¥–∞–ª–∏—Ç—å –ü—Ä–æ–¥—É–∫—Ç",
        "add_order": "üì¶ –î–æ–±–∞–≤–∏—Ç—å –ó–∞–∫–∞–∑",
        "view_orders": "üìú –°–ø–∏—Å–æ–∫ –ó–∞–∫–∞–∑–æ–≤",
        "select_action": "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        "back_to_main": "üîô –í –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é",
        "select_category_to_edit": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        "back_to_manage_categories": "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
        "contact_info": "üìç –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "choose_contact_info": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã",
        "welcome_intro": "üìã –° –Ω–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ:\n- –í—ã–±–∏—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–µ–Ω—é\n- –û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –∫—ç—à–±—ç–∫\n- –£–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ—Ñ–∏–ª–µ–º\n- –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏",
        "cashback_info": "üìå –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫—ç—à–±—ç–∫, —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ ({total:.2f} —Å–æ–º–æ–Ω–∏) —É–º–µ–Ω—å—à–∏—Ç—Å—è.",
        "whatsapp_1": "üì± WhatsApp (+992900585249)",
        "whatsapp_2": "üì± WhatsApp (+992877808002)",
    },
    "en": {
        "welcome": "<b>üç´üçì Welcome to ChocoBerry!</b>\nChoose an action:",
        "choose_language": "Please select a language:",
        "menu": "üç´ Menu",
        "cart": "üõí Cart",
        "profile": "üë§ Profile",
        "cashback": "üí∞ Cashback",
        "order_history": "üìú Order History",
        "admin_panel": "üîß Admin Panel",
        "language_changed": "Language changed to {language}! ‚úÖ",
        "no_orders": "You have no orders! üòî Please add products to your cart and place an order.",
        "product_added": "Product '{name}' <b>added!</b>",
        "choose_category": "üìã Select a category:",
        "no_categories": "No categories available!",
        "product": "Product",
        "quantity": "Quantity",
        "total": "Total",
        "date": "Date",
        "product_deleted": "Product deleted",
        "error": "An error occurred, please try again! üòû",
        "invalid_image": "Please upload an image or use /skip!",
        "product_exists": "Product with name '{name}' already exists! Please choose another name.",
        "add_another_product": "Add another product",
        "back_to_admin": "Back to admin panel",
        "next_action": "Next action:",
        "add_to_cart_button": "üì• Add to Cart: {name}",
        "price": "Price",
        "no_access": "You don't have access to this action!",
        "manage_categories": "Category Management",
        "cart_empty": "Your cart is empty! üõí",
        "profile_missing": "Please fill out your profile first! üìã",
        "new_order": "üì¶ New Order",
        "user": "User",
        "phone": "Phone Number",
        "products": "Products",
        "cashback_earned": "Earned Cashback",
        "order_confirmed": "<b>‚úÖ Your order has been confirmed!</b> Cart cleared.",
        "group_notification_error": "Error sending notification to group: {error}",
        "product_not_found": "Product not found! üòî",
        "confirm_delete_product": "<b>Are you sure you want to delete the product '{name}'?</b>\nThis will also remove related carts and orders!",
        "yes_delete": "‚úÖ Yes, delete",
        "no_cancel": "‚ùå No, cancel",
        "enter_new_phone": "Please enter a new phone number:",
        "address": "üè™ Our sales points:\n\n1. Dom Pechati (city center)\n2. Auchan, 3rd floor (food court)\n3. Siyoma Mall, 2nd floor\n\nüïí Working hours: 10:00-23:00",
        "contacts": "üì± Our contacts:\n\n‚òéÔ∏è Phone for orders:\n+992 900-58-52-49\n+992 877-80-80-02\n\nüí¨ Write to us anytime!",
        "back_to_categories": "Back to categories",
        "no_orders_admin": "No orders available!",
        "order_list": "Order List",
        "total_all_orders": "Total amount of orders",
        "cashback_used": "Cashback of {amount:.2f} somoni has been used!",
        "cashback_available": "You have {amount:.2f} somoni cashback. Would you like to use it?",
        "use_cashback": "Use cashback",
        "skip_cashback": "Continue without cashback",
        "choose_payment_method": "Please select a payment method:",
        "payment_cash": "üíµ Cash",
        "payment_card": "üí≥ Bank Card",
        "payment_method_selected": "Payment method: {method} selected.",
        "order_details_payment": "Payment method: {method}",
        "feedback": "üìù Feedback",
        "send_feedback": "Please write your feedback:",
        "feedback_sent": "‚úÖ Your feedback has been successfully sent! Thank you for your response.",
        "feedback_empty": "Please enter the text of your feedback!",
        "feedback_notification": "üìù New Feedback\n\nüë§ User: {first_name} (@{username})\nüìú Text: {feedback_text}\nüìÖ Date: {date}",
        "social_media": "üåê We are on Social Media",
        "social_media_links": "üì± Follow us on social media:\n\nüì∏ <a href='{instagram_url}'>Instagram</a>\nüé• <a href='{tiktok_url}'>TikTok</a>",
        "address": "üè™ Address",
        "contacts": "üì± Contacts",
        "address_text": "üè™ Our sales points:\n\n1. Dom Pechati (city center)\n2. Auchan, 3rd floor (food court)\n3. Siyoma Mall, 2nd floor\n\nüïí Working hours: 10:00-23:00",
        "contacts_text": "üì± Our contacts:\n\n‚òéÔ∏è Phone for orders:\n+992 900-58-52-49\n+992 877-80-80-02\n\nüí¨ Write to us anytime!",
        "admin_update_product": "üìù Update Product",
        "select_product_to_update": "Select a product to update:",
        "no_products": "No products available!",
        "update_product_name": "Enter the new product name:",
        "update_product_description": "Enter the new product description (optional, type '‚è≠ Skip' to skip):",
        "update_product_price": "Enter the new product price (in somoni):",
        "update_product_category": "Select the new product category:",
        "update_product_image": "Upload a new product image (optional, type '‚è≠ Skip' to skip):",
        "product_updated": "‚úÖ Product successfully updated!",
        "invalid_price": "Invalid price! Please enter a positive number.",
        "skip": "‚è≠ Skip",
        "no_access": "üö´ You do not have access to the admin panel!",
        "invalid_phone": "Invalid number! {error}",
        "enter_address": "Please enter your address:",
        "add_product": "‚ûï Add Product",
        "delete_product": "üóë Delete Product",
        "add_order": "üì¶ Add Order",
        "view_orders": "üìú View Orders",
        "select_action": "Select the desired action",
        "back_to_main": "üîô Back to Main Menu",
        "select_category_to_edit": "Select a category to edit:",
        "back_to_manage_categories": "üîô Back to category management",
        "contact_info": "üìç Contact Information",
        "choose_contact_info": "Please select: address or contacts"  ,  
        "welcome_intro": "üìã With us, you can:\n- Choose products from the menu\n- Place orders and earn cashback\n- Manage your profile\n- Contact us" ,
        "cashback_info": "üìå If you use cashback, the order total ({total:.2f} somoni) will be reduced." ,
        "whatsapp_1": "üì± WhatsApp (+992900585249)",
        "whatsapp_2": "üì± WhatsApp (+992877808002)",    
 
    }
}

def get_text(user_id: int, key: str, **kwargs) -> str:
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=user_id).first()
        language = user.language if user and user.language in TRANSLATIONS else "tj"
        text = TRANSLATIONS.get(language, TRANSLATIONS["tj"]).get(key, key)
        return text.format(**kwargs)
    except KeyError:
        logger.error(f"Error formatting text for key '{key}' in language '{language}'")
        return text
    finally:
        session.close()


def escape_html(text: str) -> str:
    if text is None:
        return ""
    return text.replace('&', '&').replace('<', '<').replace('>', '>')
    
def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

@dp.message(Command("start"))
async def start_command(message: types.Message):
    try:
        session = Session()
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user:
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name or None,
                language="tj"
            )
            session.add(user)
            session.add(Cashback(telegram_id=message.from_user.id, amount=0.0))
            try:
                session.commit()
            except Exception as e:
                session.rollback()
                logger.error(f"–•–∞—Ç–æ “≥–∞–Ω–≥–æ–º–∏ —Å–∞–±—Ç–∏ –∫–æ—Ä–±–∞—Ä: {str(e)}")
                await message.answer(get_text(message.from_user.id, "error"))
                session.close()
                return

        welcome_text = (
            f"{get_text(message.from_user.id, 'welcome')}\n\n"
            f"üìã –ë–æ –º–æ —à—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥:\n"
            f"- –ú–∞“≥—Å—É–ª–æ—Ç—Ä–æ –∞–∑ –º–µ–Ω—é –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥\n"
            "- –§–∞—Ä–º–æ–∏—à –¥–∏“≥–µ–¥ –≤–∞ –∫—ç—à–±—ç–∫ –±–∞ –¥–∞—Å—Ç –æ—Ä–µ–¥\n"
            "- –ü—Ä–æ—Ñ–∏–ª–∏ —Ö—É–¥—Ä–æ –∏–¥–æ—Ä–∞ –∫—É–Ω–µ–¥\n"
            "- –ë–æ –º–æ –¥–∞—Ä —Ç–∞–º–æ—Å —à–∞–≤–µ–¥\n\n"
            f"–ê–≤–≤–∞–ª –∑–∞–±–æ–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üáπüáØ –¢–æ“∑–∏–∫”£", callback_data="set_language_tj"),
                    InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_language_ru"),
                    InlineKeyboardButton(text="üá¨üáß English", callback_data="set_language_en")
                ]
            ]
        )
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")
        session.close()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä start_command: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))
        if 'session' in locals():
            session.close()
            

def get_main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    buttons = [
        [
            KeyboardButton(text=get_text(user_id, "menu")),
            KeyboardButton(text=get_text(user_id, "cart"))
        ],
        [
            KeyboardButton(text=get_text(user_id, "profile")),
            KeyboardButton(text=get_text(user_id, "cashback"))
        ],
        [
            KeyboardButton(text=get_text(user_id, "order_history")),
            KeyboardButton(text=get_text(user_id, "contact_info"))  
        ],
        [
            KeyboardButton(text=get_text(user_id, "feedback")),
            KeyboardButton(text=get_text(user_id, "social_media"))
        ]
    ]
    if is_admin(user_id):
        buttons.append([KeyboardButton(text=get_text(user_id, "admin_panel"))])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
            

@dp.callback_query(lambda c: c.data.startswith("set_language_"))
async def set_language(callback: types.CallbackQuery, state: FSMContext):
    try:
        language = callback.data.split("_")[-1]
        if language not in ["tj", "ru", "en"]:
            await callback.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫!")
            await callback.answer()
            return

        session = Session()
        user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
        profile = session.query(UserProfile).filter_by(telegram_id=callback.from_user.id).first()
        
        if user:
            user.language = language
            session.commit()
        
        session.close()

        # Check if profile exists
        if not profile:
            await callback.message.answer(get_text(callback.from_user.id, "profile_missing"))
            await callback.message.answer(get_text(callback.from_user.id, "enter_new_phone"))
            await state.set_state(ProfileForm.phone)
        else:
            keyboard = get_main_keyboard(callback.from_user.id)
            await callback.message.answer(
                get_text(callback.from_user.id, "language_changed", language=language.upper()),
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_language: {str(e)}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
        await callback.answer()
    

    
@dp.message(Command("language"))
async def change_language_command(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üáπüáØ –¢–æ“∑–∏–∫”£", callback_data="set_language_tj"),
                InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_language_ru"),
                InlineKeyboardButton(text="üá¨üáß English", callback_data="set_language_en")
            ]
        ]
    )
    await message.answer(get_text(message.from_user.id, "choose_language"), reply_markup=keyboard)
    
    
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    try:
        # –ò—Å—Ç–∏—Ñ–æ–¥–∞ –∞–∑ get_main_keyboard –±–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–∏ –∞—Å–æ—Å”£ –±–æ —Ç–∞—Ä“∑—É–º–∞“≥–æ–∏ –¥—É—Ä—É—Å—Ç
        keyboard = get_main_keyboard(callback.from_user.id)
        await callback.message.answer(
            text="‚úÖ –ë–∞ –º–µ–Ω—é–∏ –∞—Å–æ—Å”£ –±–∞—Ä–≥–∞—à—Ç–µ–¥:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä back_to_main: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"), parse_mode="HTML")
        

@dp.message(lambda message: message.text == get_text(message.from_user.id, "social_media"))
async def social_media_links(message: types.Message):
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì∏ Instagram", url=INSTAGRAM_URL)],
            [InlineKeyboardButton(text="üé• TikTok", url=TIKTOK_URL)]
        ])
        await message.answer(
            get_text(
                message.from_user.id,
                "social_media_links",
                instagram_url=INSTAGRAM_URL,
                tiktok_url=TIKTOK_URL
            ),
            parse_mode="HTML",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä social_media_links: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))
        


@dp.message(lambda message: message.text in [TRANSLATIONS["tj"]["menu"], TRANSLATIONS["ru"]["menu"], TRANSLATIONS["en"]["menu"]])
async def show_menu(message: types.Message):
    try:
        session = Session()
        categories = session.query(Category).all()
        session.close()

        if not categories:
            await message.answer(get_text(message.from_user.id, "no_categories"))
            return

        for category in categories:
            session = Session()
            products = session.query(Product).filter_by(category_id=category.id).all()
            session.close()

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{escape_html(product.name)} - {product.price} —Å–æ–º–æ–Ω”£",
                    callback_data=f"view_product_{product.id}"
                )] for product in products
            ])

            caption = f"<b>{escape_html(category.name)}</b>\n\n"
            if not products:
                caption += "–î–∞—Ä –∏–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è —è–≥–æ–Ω –º–∞“≥—Å—É–ª–æ—Ç –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç üòî"
            else:
                caption += "–ú–∞“≥—Å—É–ª–æ—Ç—Ä–æ –∞–∑ —Ä”Ø–π—Ö–∞—Ç–∏ –∑–µ—Ä –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:"

            if category.image_id:
                try:
                    await message.answer_photo(
                        photo=category.image_id,
                        caption=caption,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"–•–∞—Ç–æ –¥–∞—Ä —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ç–∞—Å–≤–∏—Ä –±–∞—Ä–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category.name}: {str(e)}")
                    await message.answer(caption, reply_markup=keyboard, parse_mode="HTML")
            else:
                await message.answer(caption, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä show_menu: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))
        if 'session' in locals():
            session.close()
            
            
@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery):
    try:
        session = Session()
        categories = session.query(Category).all()
        session.close()

        if not categories:
            await callback.message.answer(get_text(callback.from_user.id, "no_categories"))
            await callback.answer()
            return

        for category in categories:
            session = Session()
            products = session.query(Product).filter_by(category_id=category.id).all()
            session.close()

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{escape_html(product.name)} - {product.price} —Å–æ–º–æ–Ω”£",
                    callback_data=f"view_product_{product.id}"
                )] for product in products
            ])

            caption = f"<b>{escape_html(category.name)}</b>\n\n"
            if not products:
                caption += "–î–∞—Ä –∏–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è —è–≥–æ–Ω –º–∞“≥—Å—É–ª–æ—Ç –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç üòî"
            else:
                caption += "–ú–∞“≥—Å—É–ª–æ—Ç—Ä–æ –∞–∑ —Ä”Ø–π—Ö–∞—Ç–∏ –∑–µ—Ä –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:"

            if category.image_id:
                try:
                    await callback.message.answer_photo(
                        photo=category.image_id,
                        caption=caption,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"–•–∞—Ç–æ –¥–∞—Ä —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ç–∞—Å–≤–∏—Ä –±–∞—Ä–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category.name}: {str(e)}")
                    await callback.message.answer(caption, reply_markup=keyboard, parse_mode="HTML")
            else:
                await callback.message.answer(caption, reply_markup=keyboard, parse_mode="HTML")

        await callback.answer()

    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä back_to_menu: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()
        if 'session' in locals():
            session.close()             
            
            
@dp.callback_query(lambda c: c.data == "admin_edit_category")
async def admin_edit_category(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.message.answer(get_text(callback.from_user.id, "no_access"))
        await callback.answer()
        return
    try:
        session = Session()
        categories = session.query(Category).all()
        session.close()

        if not categories:
            await callback.message.answer(get_text(callback.from_user.id, "no_categories"))
            await callback.answer()
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=category.name, callback_data=f"edit_category_{category.id}")]
                for category in categories
            ]
        )
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=get_text(callback.from_user.id, "back_to_manage_categories"), callback_data="admin_manage_categories")])

        await callback.message.answer(get_text(callback.from_user.id, "select_category_to_edit"), reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä admin_edit_category: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("edit_category_"))
async def select_category_to_edit(callback: types.CallbackQuery, state: FSMContext):
    try:
        category_id = int(callback.data.split("_")[-1])
        await state.update_data(category_id=category_id)
        await callback.message.answer("–¢–∞—Å–≤–∏—Ä–∏ –Ω–∞–≤ –±–∞—Ä–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±–æ—Ä –∫—É–Ω–µ–¥ (—ë /skip –±–∞—Ä–æ–∏ –≥—É–∑–∞—à—Ç–∞–Ω):")
        await state.set_state(AdminCategoryForm.image)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä select_category_to_edit: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()
        
                    

@dp.callback_query(lambda c: c.data.startswith("category_"))
async def show_category_products(callback: types.CallbackQuery):
    try:
        category_id = int(callback.data.split("_")[-1])
        session = Session()
        category = session.query(Category).filter_by(id=category_id).first()
        products = session.query(Product).filter_by(category_id=category_id).all()
        session.close()

        if not category:
            await callback.message.answer(get_text(callback.from_user.id, "no_categories"))
            await callback.answer()
            return

        response = f"üç´üçì <b>{escape_html(category.name)}</b>\n\n"
        for product in products:
            caption = (
                f"<b>{escape_html(product.name)}</b>\n"
                f"{escape_html(product.description or '')}\n"
                f"üíµ {get_text(callback.from_user.id, 'price')}: ${product.price}"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=get_text(callback.from_user.id, "add_to_cart_button", name=escape_html(product.name)),
                    callback_data=f"add_to_cart_{product.id}"
                )]
            ])

            if product.image_id:
                try:
                    await callback.message.answer_photo(
                        photo=product.image_id,
                        caption=caption,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"Error sending image for product {product.name}: {str(e)}")
                    await callback.message.answer(
                        caption,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
            else:
                await callback.message.answer(
                    caption,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=get_text(callback.from_user.id, "back_to_categories"), callback_data="back_to_categories")]
        ])
        await callback.message.answer(response, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in show_category_products: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()
        if 'session' in locals():
            session.close()

@dp.callback_query(lambda c: c.data == "back_to_categories")
async def back_to_categories(callback: types.CallbackQuery):
    try:
        session = Session()
        categories = session.query(Category).all()
        session.close()

        if not categories:
            await callback.message.answer(get_text(callback.from_user.id, "no_categories"))
            await callback.answer()
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=category.name, callback_data=f"category_{category.id}")]
            for category in categories
        ])
        await callback.message.answer(get_text(callback.from_user.id, "choose_category"), reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä back_to_categories: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("add_to_cart_"))
async def add_to_cart(callback: types.CallbackQuery):
    try:
        product_id = int(callback.data.split("_")[-1])
        session = Session()
        existing_cart_item = session.query(Cart).filter_by(telegram_id=callback.from_user.id, product_id=product_id).first()
        if existing_cart_item:
            existing_cart_item.quantity += 1
        else:
            cart_item = Cart(telegram_id=callback.from_user.id, product_id=product_id, quantity=1)
            session.add(cart_item)
        session.commit()
        product = session.query(Product).filter_by(id=product_id).first()
        session.close()
        await callback.message.answer(
            get_text(callback.from_user.id, "product_added", name=escape_html(product.name)),
            parse_mode="HTML"  # –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ parse_mode
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä add_to_cart: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"), parse_mode="HTML")
        await callback.answer()
        if 'session' in locals():
            session.close()

@dp.message(lambda message: message.text == get_text(message.from_user.id, "cart"))
async def view_cart(message: types.Message):
    try:
        session = Session()
        cart_items = session.query(Cart, Product).join(Product).filter(Cart.telegram_id == message.from_user.id).all()
        profile = session.query(UserProfile).filter_by(telegram_id=message.from_user.id).first()
        cashback = session.query(Cashback).filter_by(telegram_id=message.from_user.id).first()
        session.close()

        if not cart_items:
            await message.answer(get_text(message.from_user.id, "cart_empty"))
            return

        if not profile:
            await message.answer(get_text(message.from_user.id, "profile_missing"))
            return

        total = 0
        response = "<b>üõí –°–∞–±–∞–¥–∏ —à—É–º–æ:</b>\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for cart_item, product in cart_items:
            item_total = product.price * cart_item.quantity
            total += item_total
            response += (
                f"üì¶ <b>{escape_html(product.name)}</b>\n"
                f"üî¢ –ú–∏“õ–¥–æ—Ä: x{cart_item.quantity}\n"
                f"üíµ –ù–∞—Ä—Ö: {item_total:.2f} —Å–æ–º–æ–Ω”£\n\n"
            )
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="‚ûï", callback_data=f"increase_quantity_{cart_item.id}"),
                InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_quantity_{cart_item.id}"),
                InlineKeyboardButton(text="üóë –•–æ—Ä–∏“∑", callback_data=f"remove_from_cart_{cart_item.id}")
            ])
            if product.image_id:
                await message.answer_photo(
                    photo=product.image_id,
                    caption=f"{escape_html(product.name)} - {item_total:.2f} —Å–æ–º–æ–Ω”£",
                    parse_mode="HTML"
                )

        response += f"<b>“≤–∞–º–∞–≥”£:</b> {total:.2f} —Å–æ–º–æ–Ω”£\n"
        response += f"<b>–ö—ç—à–±—ç–∫–∏ –¥–∞—Å—Ç—Ä–∞—Å:</b> {cashback.amount if cashback else 0.0} —Å–æ–º–æ–Ω”£\n"
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="–¢–∞—Å–¥–∏“õ–∏ —Ñ–∞—Ä–º–æ–∏—à", callback_data="confirm_order")])
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="–ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∫—ç—à–±—ç–∫", callback_data="use_cashback")])

        await message.answer(response, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä view_cart: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))
        

@dp.callback_query(lambda c: c.data.startswith("increase_quantity_"))
async def increase_quantity(callback: types.CallbackQuery):
    try:
        cart_item_id = int(callback.data.split("_")[-1])
        session = Session()
        cart_item = session.query(Cart).filter_by(id=cart_item_id).first()
        if cart_item:
            cart_item.quantity += 1
            session.commit()
            
            # –ù–∞–≤—Å–æ–∑–∏–∏ –ø–∞—ë–º–∏ —Å–∞–±–∞–¥
            cart_items = session.query(Cart, Product).join(Product).filter(Cart.telegram_id == callback.from_user.id).all()
            profile = session.query(UserProfile).filter_by(telegram_id=callback.from_user.id).first()
            cashback = session.query(Cashback).filter_by(telegram_id=callback.from_user.id).first()

            total = 0
            response = "<b>üõí –°–∞–±–∞–¥–∏ —à—É–º–æ:</b>\n\n"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            for item, product in cart_items:
                item_total = product.price * item.quantity
                total += item_total
                response += f"{escape_html(product.name)} x{item.quantity} - {item_total} —Å–æ–º–æ–Ω”£\n"
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text="‚ûï", callback_data=f"increase_quantity_{item.id}"),
                    InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_quantity_{item.id}"),
                    InlineKeyboardButton(text="üóë –•–æ—Ä–∏“∑", callback_data=f"remove_from_cart_{item.id}")
                ])

            response += f"<b>“≤–∞–º–∞–≥”£:</b> {total} —Å–æ–º–æ–Ω”£\n"
            response += f"<b>–ö—ç—à–±—ç–∫–∏ –¥–∞—Å—Ç—Ä–∞—Å:</b> {cashback.amount if cashback else 0.0} —Å–æ–º–æ–Ω”£\n"
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="–¢–∞—Å–¥–∏“õ–∏ —Ñ–∞—Ä–º–æ–∏—à", callback_data="confirm_order")])
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="–ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∫—ç—à–±—ç–∫", callback_data="use_cashback")])

            await bot.edit_message_text(
                text=response,
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(get_text(callback.from_user.id, "error"))
        session.close()
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä increase_quantity: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()
        if 'session' in locals():
            session.close()

@dp.callback_query(lambda c: c.data.startswith("decrease_quantity_"))
async def decrease_quantity(callback: types.CallbackQuery):
    try:
        cart_item_id = int(callback.data.split("_")[-1])
        session = Session()
        cart_item = session.query(Cart).filter_by(id=cart_item_id).first()
        if cart_item:
            if cart_item.quantity > 1:
                cart_item.quantity -= 1
                session.commit()
            else:
                session.delete(cart_item)
                session.commit()

            # –ù–∞–≤—Å–æ–∑–∏–∏ –ø–∞—ë–º–∏ —Å–∞–±–∞–¥
            cart_items = session.query(Cart, Product).join(Product).filter(Cart.telegram_id == callback.from_user.id).all()
            profile = session.query(UserProfile).filter_by(telegram_id=callback.from_user.id).first()
            cashback = session.query(Cashback).filter_by(telegram_id=callback.from_user.id).first()

            if not cart_items:
                await bot.edit_message_text(
                    text=get_text(callback.from_user.id, "cart_empty"),
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    parse_mode="HTML"
                )
                session.close()
                await callback.answer()
                return

            total = 0
            response = "<b>üõí –°–∞–±–∞–¥–∏ —à—É–º–æ:</b>\n\n"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            for item, product in cart_items:
                item_total = product.price * item.quantity
                total += item_total
                response += f"{escape_html(product.name)} x{item.quantity} - {item_total} —Å–æ–º–æ–Ω”£\n"
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text="‚ûï", callback_data=f"increase_quantity_{item.id}"),
                    InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_quantity_{item.id}"),
                    InlineKeyboardButton(text="üóë –•–æ—Ä–∏“∑", callback_data=f"remove_from_cart_{item.id}")
                ])

            response += f"<b>“≤–∞–º–∞–≥”£:</b> {total} —Å–æ–º–æ–Ω”£\n"
            response += f"<b>–ö—ç—à–±—ç–∫–∏ –¥–∞—Å—Ç—Ä–∞—Å:</b> {cashback.amount if cashback else 0.0} —Å–æ–º–æ–Ω”£\n"
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="–¢–∞—Å–¥–∏“õ–∏ —Ñ–∞—Ä–º–æ–∏—à", callback_data="confirm_order")])
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="–ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∫—ç—à–±—ç–∫", callback_data="use_cashback")])

            await bot.edit_message_text(
                text=response,
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(get_text(callback.from_user.id, "error"))
        session.close()
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä decrease_quantity: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()
        if 'session' in locals():
            session.close()

@dp.callback_query(lambda c: c.data.startswith("remove_from_cart_"))
async def remove_from_cart(callback: types.CallbackQuery):
    try:
        cart_item_id = int(callback.data.split("_")[-1])
        session = Session()
        cart_item = session.query(Cart).filter_by(id=cart_item_id).first()
        if cart_item:
            session.delete(cart_item)
            session.commit()

            # –ù–∞–≤—Å–æ–∑–∏–∏ –ø–∞—ë–º–∏ —Å–∞–±–∞–¥
            cart_items = session.query(Cart, Product).join(Product).filter(Cart.telegram_id == callback.from_user.id).all()
            profile = session.query(UserProfile).filter_by(telegram_id=callback.from_user.id).first()
            cashback = session.query(Cashback).filter_by(telegram_id=callback.from_user.id).first()

            if not cart_items:
                await bot.edit_message_text(
                    text=get_text(callback.from_user.id, "cart_empty"),
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    parse_mode="HTML"
                )
                session.close()
                await callback.answer()
                return

            total = 0
            response = "<b>üõí –°–∞–±–∞–¥–∏ —à—É–º–æ:</b>\n\n"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            for item, product in cart_items:
                item_total = product.price * item.quantity
                total += item_total
                response += f"{escape_html(product.name)} x{item.quantity} - {item_total} —Å–æ–º–æ–Ω”£\n"
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text="‚ûï", callback_data=f"increase_quantity_{item.id}"),
                    InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_quantity_{item.id}"),
                    InlineKeyboardButton(text="üóë –•–æ—Ä–∏“∑", callback_data=f"remove_from_cart_{item.id}")
                ])

            response += f"<b>“≤–∞–º–∞–≥”£:</b> {total} —Å–æ–º–æ–Ω”£\n"
            response += f"<b>–ö—ç—à–±—ç–∫–∏ –¥–∞—Å—Ç—Ä–∞—Å:</b> {cashback.amount if cashback else 0.0} —Å–æ–º–æ–Ω”£\n"
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="–¢–∞—Å–¥–∏“õ–∏ —Ñ–∞—Ä–º–æ–∏—à", callback_data="confirm_order")])
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="–ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∫—ç—à–±—ç–∫", callback_data="use_cashback")])

            await bot.edit_message_text(
                text=response,
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(get_text(callback.from_user.id, "error"))
        session.close()
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä remove_from_cart: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()
        if 'session' in locals():
            session.close()

@dp.message(lambda message: message.text == get_text(message.from_user.id, "order_history"))
async def view_order_history(message: types.Message):
    try:
        session = Session()
        orders = session.query(Order, Product).join(Product, Order.product_id == Product.id, isouter=True).filter(Order.telegram_id == message.from_user.id).all()
        session.close()

        if not orders:
            await message.answer(get_text(message.from_user.id, "no_orders"), parse_mode="HTML")
            return

        response = f"<b>{get_text(message.from_user.id, 'order_history')}</b>\n\n"
        for order, product in orders:
            product_name = escape_html(product.name) if product else get_text(message.from_user.id, "product_deleted")
            response += f"–§–∞—Ä–º–æ–∏—à #{order.id}\n"
            response += f"{get_text(message.from_user.id, 'product')}: {product_name}\n"
            response += f"{get_text(message.from_user.id, 'quantity')}: {order.quantity}\n"
            response += f"{get_text(message.from_user.id, 'total')}: {order.total} —Å–æ–º–æ–Ω”£\n"
            response += f"{get_text(message.from_user.id, 'date')}: {order.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n\n"

        try:
            await message.answer(response, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–•–∞—Ç–æ–∏ —Ç–∞“≥–ª–∏–ª–∏ HTML –¥–∞—Ä view_order_history: {str(e)}")
            await message.answer(response)
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä view_order_history: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"), parse_mode="HTML")
        if 'session' in locals():
            session.close()

@dp.callback_query(lambda c: c.data == "confirm_order")
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    try:
        session = Session()
        user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
        if not user:
            user = User(
                telegram_id=callback.from_user.id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name,
                last_name=callback.from_user.last_name or None
            )
            session.add(user)
            session.add(Cashback(telegram_id=callback.from_user.id, amount=0.0))
            session.commit()

        cart_items = session.query(Cart, Product).join(Product).filter(Cart.telegram_id == callback.from_user.id).all()
        profile = session.query(UserProfile).filter_by(telegram_id=callback.from_user.id).first()
        if not cart_items:
            session.close()
            await callback.message.answer(get_text(callback.from_user.id, "cart_empty"), parse_mode="HTML")
            await callback.answer()
            return
        if not profile:
            session.close()
            await callback.message_answer(get_text(callback.from_user.id, "profile_missing"))
            await callback.answer()
            return

        total = sum(product.price * cart_item.quantity for cart_item, product in cart_items)

        cashback = session.query(Cashback).filter_by(telegram_id=callback.from_user.id).first()
        if not cashback:
            cashback = Cashback(telegram_id=callback.from_user.id, amount=0.0)
            session.add(cashback)
            session.commit()

        await state.update_data(total=total, cart_items=[(cart_item.id, product.id, cart_item.quantity) for cart_item, product in cart_items])

        if cashback.amount > 0:
            cashback_text = (
                f"{get_text(callback.from_user.id, 'cashback_available', amount=cashback.amount)}\n"
                f"üìå –ê–≥–∞—Ä –∫—ç—à–±—ç–∫ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –∫—É–Ω–µ–¥, –º–∞–±–ª–∞“ì–∏ —Ñ–∞—Ä–º–æ–∏—à ({total:.2f} —Å–æ–º–æ–Ω) –∫–∞–º –º–µ—à–∞–≤–∞–¥.\n"
                f"–ò–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=get_text(callback.from_user.id, "use_cashback"), callback_data="apply_cashback")],
                [InlineKeyboardButton(text=get_text(callback.from_user.id, "skip_cashback"), callback_data="skip_cashback")]]
            )
            await callback.message.answer(cashback_text, reply_markup=keyboard, parse_mode="HTML")
            await state.set_state(OrderConfirmation.confirm_cashback)
        else:
            payment_text = (
                f"<b>–§–∞—Ä–º–æ–∏—à–∏ —à—É–º–æ: {total:.2f} —Å–æ–º–æ–Ω</b>\n"
                f"{get_text(callback.from_user.id, 'choose_payment_method')}"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=get_text(callback.from_user.id, "payment_cash"), callback_data="payment_cash")],
                [InlineKeyboardButton(text=get_text(callback.from_user.id, "payment_card"), callback_data="payment_card")]
            ])
            await callback.message.answer(payment_text, reply_markup=keyboard, parse_mode="HTML")
            await state.set_state(OrderConfirmation.payment_method)

        session.close()
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä confirm_order: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"), parse_mode="HTML")
        await callback.answer()
        if 'session' in locals():
            session.close()
            


@dp.callback_query(lambda c: c.data in ["apply_cashback", "skip_cashback"])
async def handle_cashback_choice(callback: types.CallbackQuery, state: FSMContext):
    try:
        session = Session()
        user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
        profile = session.query(UserProfile).filter_by(telegram_id=callback.from_user.id).first()
        data = await state.get_data()
        total = data.get("total", 0.0)
        cart_items_data = data.get("cart_items", [])

        cart_items = []
        for cart_id, product_id, quantity in cart_items_data:
            cart_item = session.query(Cart).filter_by(id=cart_id).first()
            product = session.query(Product).filter_by(id=product_id).first()
            if cart_item and product:
                cart_items.append((cart_item, product))

        cashback_applied = 0.0
        if callback.data == "apply_cashback":
            cashback = session.query(Cashback).filter_by(telegram_id=callback.from_user.id).first()
            if cashback and cashback.amount > 0:
                cashback_applied = min(cashback.amount, total)
                total -= cashback_applied
                cashback.amount -= cashback_applied
                session.commit()

        await state.update_data(total=total, cashback_applied=cashback_applied)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=get_text(callback.from_user.id, "payment_cash"), callback_data="payment_cash")],
            [InlineKeyboardButton(text=get_text(callback.from_user.id, "payment_card"), callback_data="payment_card")]
        ])
        await callback.message.answer(
            get_text(callback.from_user.id, "choose_payment_method"),
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(OrderConfirmation.payment_method)
        session.close()
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä handle_cashback_choice: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"), parse_mode="HTML")
        await callback.answer()
        if 'session' in locals():
            session.close()
            

@dp.callback_query(lambda c: c.data in ["payment_cash", "payment_card"])
async def handle_payment_method(callback: types.CallbackQuery, state: FSMContext):
    try:
        session = Session()
        user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
        profile = session.query(UserProfile).filter_by(telegram_id=callback.from_user.id).first()
        data = await state.get_data()
        total = data.get("total", 0.0)
        cashback_applied = data.get("cashback_applied", 0.0)
        cart_items_data = data.get("cart_items", [])

        # –ë–∞—Ä“õ–∞—Ä–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ —Å–∞–±–∞–¥
        cart_items = []
        for cart_id, product_id, quantity in cart_items_data:
            cart_item = session.query(Cart).filter_by(id=cart_id).first()
            product = session.query(Product).filter_by(id=product_id).first()
            if cart_item and product:
                cart_items.append((cart_item, product))

        # –¢–∞—Å–¥–∏“õ–∏ —É—Å—É–ª–∏ –ø–∞—Ä–¥–æ—Ö—Ç
        payment_method = "–ù–∞“õ–¥" if callback.data == "payment_cash" else "–ö–æ—Ä—Ç–∏ –±–æ–Ω–∫”£"
        await callback.message.answer(
            get_text(callback.from_user.id, "payment_method_selected", method=payment_method),
            parse_mode="HTML"
        )

        # –ö–æ—Ä–∫–∞—Ä–¥–∏ —Ñ–∞—Ä–º–æ–∏—à
        await process_order(callback, state, total, cart_items, user, profile, session, cashback_applied, payment_method)
        session.close()
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä handle_payment_method: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"), parse_mode="HTML")
        await callback.answer()
        if 'session' in locals():
            session.close()
                                    

async def process_order(callback: types.CallbackQuery, state: FSMContext, total: float, cart_items: list, user, profile, session, cashback_applied: float = 0.0, payment_method: str = None):
    cashback_earned = total * 0.05
    cashback = session.query(Cashback).filter_by(telegram_id=callback.from_user.id).first()
    if cashback:
        cashback.amount += cashback_earned
    else:
        cashback = Cashback(telegram_id=callback.from_user.id, amount=cashback_earned)
        session.add(cashback)
    session.commit()

    order_details = f"{get_text(callback.from_user.id, 'new_order')}\n\n"
    order_details += f"üë§ {get_text(callback.from_user.id, 'user')}: {escape_html(user.first_name)} (@{escape_html(user.username or '')})\n"
    order_details += f"üìû {get_text(callback.from_user.id, 'phone')}: {escape_html(profile.phone_number)}\n"
    order_details += f"üç´ {get_text(callback.from_user.id, 'products')}:\n"
    for cart_item, product in cart_items:
        order = Order(
            telegram_id=callback.from_user.id,
            product_id=product.id,
            quantity=cart_item.quantity,
            total=product.price * cart_item.quantity
        )
        session.add(order)
        item_total = product.price * cart_item.quantity
        order_details += f"{escape_html(product.name)} x{cart_item.quantity} - {item_total:.2f} —Å–æ–º–æ–Ωƒ´\n"

    order_details += f"\nüíµ {get_text(callback.from_user.id, 'total')}: {total:.2f} —Å–æ–º–æ–Ωƒ´\n"
    if cashback_applied > 0:
        order_details += f"üí∞ {get_text(callback.from_user.id, 'cashback_used').format(amount=cashback_applied)} —Å–æ–º–æ–Ωƒ´\n"
    order_details += f"üí∞ {get_text(callback.from_user.id, 'cashback_earned')}: {cashback_earned:.2f} —Å–æ–º–æ–Ωƒ´\n"
    if payment_method:
        order_details += f"üí≥ {get_text(callback.from_user.id, 'order_details_payment', method=payment_method)}\n"
    order_details += f"üìÖ {get_text(callback.from_user.id, 'date')}: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}"

    session.query(Cart).filter(Cart.telegram_id == callback.from_user.id).delete()
    session.commit()

    try:
        await bot.send_message(chat_id=GROUP_CHAT_ID, text=order_details, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –æ–≥–æ“≥”£ –±–∞ –≥—É—Ä—É“≥: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "group_notification_error", error=str(e)), parse_mode="HTML")

    response = get_text(callback.from_user.id, "order_confirmed")
    if cashback_applied > 0:
        response += f"\n{get_text(callback.from_user.id, 'cashback_used').format(amount=cashback_applied)} —Å–æ–º–æ–Ωƒ´"
    if payment_method:
        response += f"\n{get_text(callback.from_user.id, 'order_details_payment', method=payment_method)}"
    await callback.message.answer(response, parse_mode="HTML")
    

@dp.message(lambda message: message.text == get_text(message.from_user.id, "profile"))
async def setup_profile(message: types.Message, state: FSMContext):
    try:
        session = Session()
        profile = session.query(UserProfile).filter_by(telegram_id=message.from_user.id).first()
        session.close()

        if profile:
            response = f"–ü—Ä–æ—Ñ–∏–ª–∏ —à—É–º–æ:\n–†–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω: {escape_html(profile.phone_number)}\n–°—É—Ä–æ“ì–∞: {escape_html(profile.address)}"
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–¢–∞“ì–π–∏—Ä –¥–æ–¥–∞–Ω", callback_data="edit_profile")],
                    [InlineKeyboardButton(text="–ë–∞ –º–µ–Ω—é–∏ –∞—Å–æ—Å”£", callback_data="back_to_main")]
                ]
            )
            await message.answer(response, reply_markup=keyboard)
        else:
            await message.answer(get_text(message.from_user.id, "enter_new_phone"))
            await state.set_state(ProfileForm.phone)
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä setup_profile: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))

@dp.callback_query(lambda c: c.data == "edit_profile")
async def edit_profile(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(get_text(callback.from_user.id, "enter_new_phone"))
    await state.set_state(ProfileForm.phone)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    try:
        # –ò—Å—Ç–∏—Ñ–æ–¥–∞ –∞–∑ get_main_keyboard –±–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–∏ –∞—Å–æ—Å”£ –±–æ —Ç–∞—Ä“∑—É–º–∞“≥–æ–∏ –¥—É—Ä—É—Å—Ç
        keyboard = get_main_keyboard(callback.from_user.id)
        await callback.message.answer(
            text="‚úÖ –ë–∞ –º–µ–Ω—é–∏ –∞—Å–æ—Å”£ –±–∞—Ä–≥–∞—à—Ç–µ–¥:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä back_to_main: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"), parse_mode="HTML")

@dp.message(ProfileForm.phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    # –¢–æ–∑–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ä–∞–º–∑“≥–æ–∏ “ì–∞–π—Ä–∏—Ä–∞“õ–∞–º”£ (+, -, –±–æ—à–≥–æ“≥)
    cleaned_phone = ''.join(filter(str.isdigit, phone))
    # –ê–≥–∞—Ä —Ä–∞“õ–∞–º –±–æ +992 –æ“ì–æ–∑ —à–∞–≤–∞–¥, –æ–Ω—Ä–æ —Ç–æ–∑–∞ –∫—É–Ω–µ–º
    if cleaned_phone.startswith("992"):
        cleaned_phone = cleaned_phone[3:]
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 9 —Ü–∏—Ñ—Ä
    if not cleaned_phone.isdigit() or len(cleaned_phone) != 9:
        await message.answer(
            get_text(
                message.from_user.id,
                "invalid_phone",
                error="–†–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –±–æ—è–¥ 9 —Ä–∞“õ–∞–º –±–æ—à–∞–¥ (–º–∞—Å–∞–ª–∞–Ω, 900585249)! "
                      "–õ—É—Ç—Ñ–∞–Ω –±–µ +992 –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥."
            )
        )
        return
    await state.update_data(phone=cleaned_phone)
    await message.answer(get_text(message.from_user.id, "enter_address"))
    await state.set_state(ProfileForm.address)

@dp.message(ProfileForm.address)
async def process_address(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        phone = data["phone"]
        address = message.text
        session = Session()
        profile = session.query(UserProfile).filter_by(telegram_id=message.from_user.id).first()
        if profile:
            profile.phone_number = phone
            profile.address = address
        else:
            profile = UserProfile(telegram_id=message.from_user.id, phone_number=phone, address=message.text)
            session.add(profile)
        session.commit()
        session.close()
        await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª –Ω–∞–≤—Å–æ–∑”£ —à—É–¥!")
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=get_text(message.from_user.id, "menu")), KeyboardButton(text=get_text(message.from_user.id, "cart"))],
                [KeyboardButton(text=get_text(message.from_user.id, "profile")), KeyboardButton(text=get_text(message.from_user.id, "cashback"))],
                [KeyboardButton(text=get_text(message.from_user.id, "order_history")), KeyboardButton(text="address"), KeyboardButton(text="contacts")]
            ] + [[KeyboardButton(text=get_text(message.from_user.id, "admin_panel"))] if is_admin(message.from_user.id) else []],
            resize_keyboard=True
        )
        await message.answer("–ë–∞ –º–µ–Ω—é–∏ –∞—Å–æ—Å”£:", reply_markup=keyboard)
        await state.clear()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_address: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))
        await state.clear()

@dp.message(lambda message: message.text == get_text(message.from_user.id, "cashback"))
async def check_cashback(message: types.Message):
    try:
        session = Session()
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

        if not user or not user.language:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üáπüáØ –¢–æ“∑–∏–∫”£", callback_data="set_language_tj"),
                        InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_language_ru"),
                        InlineKeyboardButton(text="üá¨üáß English", callback_data="set_language_en")
                    ]
                ]
            )
            await message.answer(get_text(message.from_user.id, "choose_language"), reply_markup=keyboard)
            session.close()
            return

        cashback = session.query(Cashback).filter_by(telegram_id=message.from_user.id).first()
        session.close()
        await message.answer(f"<b>{get_text(message.from_user.id, 'cashback')}:</b> {cashback.amount if cashback else 0.0} —Å–æ–º–æ–Ω”£", parse_mode="HTML")
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä check_cashback: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))
        if 'session' in locals():
            session.close()

@dp.callback_query(lambda c: c.data == "use_cashback")
async def use_cashback(callback: types.CallbackQuery):
    try:
        with Session() as session:
            cashback = session.query(Cashback).filter_by(telegram_id=callback.from_user.id).first()
            cart_items = session.query(Cart, Product).join(Product).filter(Cart.telegram_id == callback.from_user.id).all()

            if not cart_items:
                await callback.message.answer(get_text(callback.from_user.id, "cart_empty"))
                await callback.answer()
                return

            total = sum(product.price * cart_item.quantity for cart_item, product in cart_items)

            if not cashback or cashback.amount == 0:
                await callback.message.answer("–®—É–º–æ –∫—ç—à–±—ç–∫ –Ω–∞–¥–æ—Ä–µ–¥!")
                await callback.answer()
                return

            if cashback.amount >= total:
                cashback.amount -= total
                total = 0
            else:
                total -= cashback.amount
                cashback.amount = 0

            updated_cashback_amount = cashback.amount

            session.commit()

        await callback.message.answer(
            f"<b>–ö—ç—à–±—ç–∫ –∏—Å—Ç–∏—Ñ–æ–¥–∞ —à—É–¥!</b>\n–ë–∞“õ–∏—è–∏ –Ω–∞–≤: {updated_cashback_amount} —Å–æ–º–æ–Ω”£\n–ú–∞–±–ª–∞“ì–∏ –±–æ“õ–∏–º–æ–Ω–¥–∞: {total} —Å–æ–º–æ–Ω”£",
            parse_mode="HTML"
        )
        await view_cart(callback.message)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä use_cashback: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()

@dp.message(lambda message: message.text == get_text(message.from_user.id, "admin_panel"))
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer(get_text(message.from_user.id, "no_access"))
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=get_text(message.from_user.id, "add_product"), callback_data="admin_add_product"),
                InlineKeyboardButton(text=get_text(message.from_user.id, "delete_product"), callback_data="admin_delete_product")
            ],
            [
                InlineKeyboardButton(text=get_text(message.from_user.id, "admin_update_product"), callback_data="admin_update_product")
            ],
            [
                InlineKeyboardButton(text=get_text(message.from_user.id, "add_order"), callback_data="admin_add_order"),
                InlineKeyboardButton(text=get_text(message.from_user.id, "view_orders"), callback_data="admin_view_orders")
            ],
            [
                InlineKeyboardButton(text=get_text(message.from_user.id, "manage_categories"), callback_data="admin_manage_categories")
            ],
            [
                InlineKeyboardButton(text=get_text(message.from_user.id, "back_to_main"), callback_data="back_to_main")
            ]
        ]
    )
    await message.answer(
        f"<b>{get_text(message.from_user.id, 'admin_panel')}</b>\n{get_text(message.from_user.id, 'select_action')}:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data == "admin_panel")
async def back_to_admin_panel(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer(get_text(callback.from_user.id, "no_access"))
        await callback.answer()
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –ò–ª–æ–≤–∞–∏ –ú–∞“≥—Å—É–ª–æ—Ç", callback_data="admin_add_product"),
                InlineKeyboardButton(text="üóë “≤–∞–∑—Ñ–∏ –ú–∞“≥—Å—É–ª–æ—Ç", callback_data="admin_delete_product")
            ],
            [
                InlineKeyboardButton(text="üì¶ –ò–ª–æ–≤–∞–∏ –§–∞—Ä–º–æ–∏—à", callback_data="admin_add_order"),
                InlineKeyboardButton(text="üìú –†”Ø–π—Ö–∞—Ç–∏ –§–∞—Ä–º–æ–∏—à“≥–æ", callback_data="admin_view_orders")
            ],
            [
                InlineKeyboardButton(text="üìã –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –ö–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ", callback_data="admin_manage_categories")
            ],
            [
                InlineKeyboardButton(text="üîô –ë–∞ –ú–µ–Ω—é–∏ –ê—Å–æ—Å”£", callback_data="back_to_main")
            ]
        ]
    )
    await callback.message.answer(
        f"<b>{get_text(callback.from_user.id, 'admin_panel')}</b>\n–ò–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥ –∞–º–∞–ª–∏ –¥–∏–ª—Ö–æ“≥—Ä–æ –∞–∑ –º–µ–Ω—é–∏ –∑–µ—Ä:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "admin_manage_categories")
async def admin_manage_categories(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer(get_text(callback.from_user.id, "no_access"))
        await callback.answer()
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –≠“∑–æ–¥–∏ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="admin_add_category"),
                InlineKeyboardButton(text="üóë “≤–∞–∑—Ñ–∏ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="admin_delete_category")
            ],
            [
                InlineKeyboardButton(text="‚úèÔ∏è –¢–∞“≥—Ä–∏—Ä–∏ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="admin_edit_category")
            ],
            [
                InlineKeyboardButton(text="üîô –ë–∞ –ü–∞–Ω–µ–ª–∏ –ê–¥–º–∏–Ω", callback_data="admin_panel")
            ]
        ]
    )
    await callback.message.answer(
        f"<b>{get_text(callback.from_user.id, 'manage_categories')}</b>\n–ò–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥ –∞–º–∞–ª–∏ –¥–∏–ª—Ö–æ“≥—Ä–æ –±–∞—Ä–æ–∏ –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "admin_add_product")
async def admin_add_product(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.message.answer(get_text(callback.from_user.id, "no_access"))
        return
    await callback.message.answer("–ù–æ–º–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω:")
    await state.set_state(AdminProductForm.name)
    await callback.answer()

@dp.message(AdminProductForm.name)
async def process_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–∞–≤—Å–∏—Ñ–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
    await state.set_state(AdminProductForm.description)

@dp.message(AdminProductForm.description)
async def process_product_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–ù–∞—Ä—Ö–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, 10.5):")
    await state.set_state(AdminProductForm.price)

@dp.message(AdminProductForm.price)
async def process_product_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        
        # –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ä”Ø–π—Ö–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ
        session = Session()
        categories = session.query(Category).all()
        session.close()

        if not categories:
            await message.answer("–Ø–≥–æ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç! –õ—É—Ç—Ñ–∞–Ω, –∞–≤–≤–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—è —ç“∑–æ–¥ –∫—É–Ω–µ–¥.")
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–≠“∑–æ–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="admin_add_category")],
                    [InlineKeyboardButton(text=get_text(message.from_user.id, "back_to_admin"), callback_data="admin_panel")]
                ]
            )
            await message.answer(get_text(message.from_user.id, "next_action"), reply_markup=keyboard)
            return

        # –°–æ—Ö—Ç–∞–Ω–∏ —Ç—É–≥–º–∞“≥–æ –±–∞—Ä–æ–∏ –∏–Ω—Ç–∏—Ö–æ–±–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=category.name, callback_data=f"select_category_{category.id}")]
                for category in categories
            ]
        )
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="–≠“∑–æ–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–∏ –Ω–∞–≤", callback_data="admin_add_category")])
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=get_text(message.from_user.id, "back_to_admin"), callback_data="admin_panel")])

        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ä–æ –∞–∑ —Ä”Ø–π—Ö–∞—Ç –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=keyboard)
        await state.set_state(AdminProductForm.category)
    except ValueError:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω, –Ω–∞—Ä—Ö–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, 10.5):")

@dp.callback_query(lambda c: c.data.startswith("select_category_"))
async def process_category_selection(callback: types.CallbackQuery, state: FSMContext):
    try:
        category_id = int(callback.data.split("_")[-1])
        session = Session()
        category = session.query(Category).filter_by(id=category_id).first()
        session.close()

        if not category:
            await callback.message.answer(get_text(callback.from_user.id, "no_categories"))
            await callback.answer()
            return

        await state.update_data(category_id=category_id)
        await callback.message.answer("–¢–∞—Å–≤–∏—Ä–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –±–æ—Ä –∫—É–Ω–µ–¥ (—ë –±–∞—Ä–æ–∏ –≥—É–∑–∞—à—Ç–∞–Ω /skip –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥):")
        await state.set_state(AdminProductForm.image)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_category_selection: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()

@dp.message(AdminProductForm.image)
async def process_product_image(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        image_id = None
        if message.photo:
            image_id = message.photo[-1].file_id
        elif message.text != "/skip":
            await message.answer(get_text(message.from_user.id, "invalid_image"))
            return

        session = Session()
        name = escape_html(data["name"].strip())
        description = escape_html(data["description"].strip()) if data["description"] else None
        category_id = data["category_id"]

        product = Product(
            name=name,
            description=description,
            price=data["price"],
            category_id=category_id,
            image_id=image_id
        )
        session.add(product)
        try:
            session.commit()
        except Exception as e:
            session.rollback()
            await message.answer(f"–•–∞—Ç–æ “≥–∞–Ω–≥–æ–º–∏ –∏–ª–æ–≤–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç: {str(e)}")
            session.close()
            return

        session.close()

        await message.answer(get_text(message.from_user.id, "product_added", name=name), parse_mode="HTML")
        await state.clear()

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=get_text(message.from_user.id, "add_another_product"), callback_data="admin_add_product")],
                [InlineKeyboardButton(text=get_text(message.from_user.id, "back_to_admin"), callback_data="admin_panel")]
            ]
        )
        await message.answer(get_text(message.from_user.id, "next_action"), reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_product_image: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))
        await state.clear()
        if 'session' in locals():
            session.close()

@dp.callback_query(lambda c: c.data == "admin_delete_product")
async def admin_delete_product(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer(get_text(callback.from_user.id, "no_access"))
        await callback.answer()
        return

    try:
        session = Session()
        products = session.query(Product).all()
        session.close()

        if not products:
            await callback.message.answer(get_text(callback.from_user.id, "product_not_found"))
            await callback.answer()
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{escape_html(product.name)} - {product.price} —Å–æ–º–æ–Ωƒ´", callback_data=f"delete_product_{product.id}")]
                for product in products
            ]
        )
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ë–æ–∑–≥–∞—à—Ç –±–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω", callback_data="admin_panel")])

        await callback.message.answer("–ú–∞“≥—Å—É–ª–æ—Ç—Ä–æ –±–∞—Ä–æ–∏ “≥–∞–∑—Ñ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä admin_delete_product: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("delete_product_"))
async def confirm_delete_product(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer(get_text(callback.from_user.id, "no_access"))
        await callback.answer()
        return

    try:
        product_id = int(callback.data.split("_")[-1])
        session = Session()
        product = session.query(Product).filter_by(id=product_id).first()
        if not product:
            session.close()
            await callback.message.answer(get_text(callback.from_user.id, "product_not_found"))
            await callback.answer()
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=get_text(callback.from_user.id, "yes_delete"), callback_data=f"confirm_delete_product_{product.id}")],
                [InlineKeyboardButton(text=get_text(callback.from_user.id, "no_cancel"), callback_data="admin_delete_product")]
            ]
        )
        await callback.message.answer(
            get_text(callback.from_user.id, "confirm_delete_product", name=escape_html(product.name)),
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä confirm_delete_product: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()
        if 'session' in locals():
            session.close()

@dp.callback_query(lambda c: c.data.startswith("confirm_delete_product_"))
async def execute_delete_product(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer(get_text(callback.from_user.id, "no_access"))
        await callback.answer()
        return

    try:
        product_id = int(callback.data.split("_")[-1])
        session = Session()
        product = session.query(Product).filter_by(id=product_id).first()

        if not product:
            session.close()
            await callback.message.answer(get_text(callback.from_user.id, "product_not_found"))
            await callback.answer()
            return

        session.query(Cart).filter_by(product_id=product.id).delete()
        session.query(Order).filter_by(product_id=product.id).delete()
        session.delete(product)
        session.commit()
        session.close()

        await callback.message.answer(get_text(callback.from_user.id, "product_deleted"), parse_mode="HTML")
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="“≤–∞–∑—Ñ–∏ –º–∞“≥—Å—É–ª–æ—Ç–∏ –¥–∏–≥–∞—Ä", callback_data="admin_delete_product")],
                [InlineKeyboardButton(text=get_text(callback.from_user.id, "back_to_admin"), callback_data="admin_panel")]
            ]
        )
        await callback.message.answer(get_text(callback.from_user.id, "next_action"), reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä execute_delete_product: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()
        if 'session' in locals():
            session.close()

@dp.callback_query(lambda c: c.data == "admin_add_order")
async def admin_add_order(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.message.answer(get_text(callback.from_user.id, "no_access"))
        return
    try:
        session = Session()
        users = session.query(User).all()
        session.close()

        if not users:
            await callback.message.answer("–Ø–≥–æ–Ω –∫–æ—Ä–±–∞—Ä –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç!")
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{escape_html(user.first_name)} (@{escape_html(user.username or '')})", callback_data=f"admin_select_user_{user.telegram_id}")]
                for user in users
            ]
        )
        await callback.message.answer("–ö–æ—Ä–±–∞—Ä—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=keyboard)
        await state.set_state(AdminOrderForm.user)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä admin_add_order: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("admin_select_user_"))
async def admin_select_user(callback: types.CallbackQuery, state: FSMContext):
    try:
        user_id = int(callback.data.split("_")[-1])
        await state.update_data(user_id=user_id)
        session = Session()
        products = session.query(Product).all()
        session.close()

        if not products:
            await callback.message.answer(get_text(callback.from_user.id, "product_not_found"))
            await state.clear()
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{escape_html(product.name)} - ${product.price}", callback_data=f"admin_select_product_{product.id}")]
                for product in products
            ]
        )
        await callback.message.answer("–ú–∞“≥—Å—É–ª–æ—Ç—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=keyboard)
        await state.set_state(AdminOrderForm.product)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä admin_select_user: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()
        if 'session' in locals():
            session.close()

@dp.callback_query(lambda c: c.data.startswith("admin_select_product_"))
async def admin_select_product(callback: types.CallbackQuery, state: FSMContext):
    try:
        product_id = int(callback.data.split("_")[-1])
        await state.update_data(product_id=product_id)
        await callback.message.answer("–ú–∏“õ–¥–æ—Ä–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
        await state.set_state(AdminOrderForm.quantity)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä admin_select_product: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()

@dp.message(AdminOrderForm.quantity)
async def process_order_quantity(message: types.Message, state: FSMContext):
    try:
        if not message.text.isdigit():
            await message.answer("–õ—É—Ç—Ñ–∞–Ω, –º–∏“õ–¥–æ—Ä–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, 2):")
            return
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("–ú–∏“õ–¥–æ—Ä –±–æ—è–¥ –º—É—Å–±–∞—Ç –±–æ—à–∞–¥!")
            return
        data = await state.get_data()
        session = Session()
        product = session.query(Product).filter_by(id=data["product_id"]).first()
        if not product:
            await message.answer(get_text(message.from_user.id, "product_not_found"))
            session.close()
            await state.clear()
            return

        order = Order(
            telegram_id=data["user_id"],
            product_id=data["product_id"],
            quantity=quantity,
            total=product.price * quantity
        )
        session.add(order)
        session.commit()
        session.close()

        await message.answer(
            f"–§–∞—Ä–º–æ–∏—à –±–∞—Ä–æ–∏ –∫–æ—Ä–±–∞—Ä –±–æ ID {data['user_id']} <b>–∏–ª–æ–≤–∞ —à—É–¥!</b>\n"
            f"–ú–∞“≥—Å—É–ª–æ—Ç: {escape_html(product.name)}, –ú–∏“õ–¥–æ—Ä: {quantity}, “≤–∞–º–∞–≥”£: {product.price * quantity} —Å–æ–º–æ–Ωƒ´",
            parse_mode="HTML"
        )
        await state.clear()

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ò–ª–æ–≤–∞–∏ —Ñ–∞—Ä–º–æ–∏—à–∏ –¥–∏–≥–∞—Ä", callback_data="admin_add_order")],
                [InlineKeyboardButton(text=get_text(message.from_user.id, "back_to_admin"), callback_data="admin_panel")]
            ]
        )
        await message.answer(get_text(message.from_user.id, "next_action"), reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_order_quantity: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))
        if 'session' in locals():
            session.close()

@dp.callback_query(lambda c: c.data == "admin_view_orders")
async def admin_view_orders(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer(get_text(callback.from_user.id, "no_access"))
        await callback.answer()
        return
    try:
        session = Session()
        orders = session.query(Order, User, Product).join(User).join(Product, Order.product_id == Product.id, isouter=True).all()
        session.close()

        if not orders:
            await callback.message.answer(get_text(callback.from_user.id, "no_orders_admin"), parse_mode="HTML")
            await callback.answer()
            return

        response = f"<b>{get_text(callback.from_user.id, 'order_list')}</b>\n\n"
        total_all_orders = 0.0
        for order, user, product in orders:
            product_name = escape_html(product.name) if product else get_text(callback.from_user.id, "product_deleted")
            order_total = order.total
            total_all_orders += order_total
            response += f"üì¶ {get_text(callback.from_user.id, 'order')} #{order.id}\n"
            response += f"üë§ {get_text(callback.from_user.id, 'user')}: {escape_html(user.first_name)} (@{escape_html(user.username or '')})\n"
            response += f"üç´ {get_text(callback.from_user.id, 'product')}: {product_name}\n"
            response += f"üî¢ {get_text(callback.from_user.id, 'quantity')}: {order.quantity}\n"
            response += f"üíµ {get_text(callback.from_user.id, 'total')}: {order_total:.2f} —Å–æ–º–æ–Ω”£\n"
            response += f"üìÖ {get_text(callback.from_user.id, 'date')}: {order.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n\n"

        response += f"üìä <b>{get_text(callback.from_user.id, 'total_all_orders')}</b>: {total_all_orders:.2f} —Å–æ–º–æ–Ω”£\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=get_text(callback.from_user.id, "back_to_admin"), callback_data="admin_panel")]
            ]
        )
        await callback.message.answer(response, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä admin_view_orders: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()

@dp.callback_query(lambda c: c.data == "admin_add_category")
async def admin_add_category(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.message.answer(get_text(callback.from_user.id, "no_access"))
        await callback.answer()
        return
    try:
        await callback.message.answer("–ù–æ–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, –î–µ—Å–µ—Ä—Ç):")
        await state.set_state(AdminCategoryForm.name)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä admin_add_category: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()

@dp.message(AdminCategoryForm.name)
async def process_category_name(message: types.Message, state: FSMContext):
    try:
        category_name = message.text.strip()
        if not category_name:
            await message.answer("–ù–æ–º –Ω–∞–±–æ—è–¥ —Ö–æ–ª”£ –±–æ—à–∞–¥! –õ—É—Ç—Ñ–∞–Ω, –Ω–æ–º–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
            return

        session = Session()
        existing_category = session.query(Category).filter_by(name=category_name).first()
        if existing_category:
            session.close()
            await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è–∏ '{escape_html(category_name)}' –∞–ª–ª–∞–∫–∞–π –º–∞–≤“∑—É–¥ –∞—Å—Ç!")
            return

        await state.update_data(name=category_name)
        await message.answer("–¢–∞—Å–≤–∏—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ä–æ –±–æ—Ä –∫—É–Ω–µ–¥ (—ë –±–∞—Ä–æ–∏ –≥—É–∑–∞—à—Ç–∞–Ω /skip –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥):")
        await state.set_state(AdminCategoryForm.image)
        session.close()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_category_name: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))
        if 'session' in locals():
            session.close()

@dp.message(AdminCategoryForm.image)
async def process_category_image(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        category_name = data["name"]
        image_id = None

        if message.photo:
            image_id = message.photo[-1].file_id
        elif message.text != "/skip":
            await message.answer(get_text(message.from_user.id, "invalid_image"))
            return

        session = Session()
        new_category = Category(name=category_name, image_id=image_id)
        session.add(new_category)
        session.commit()
        session.close()

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–≠“∑–æ–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–∏ –¥–∏–≥–∞—Ä", callback_data="admin_add_category")],
                [InlineKeyboardButton(text="–ë–∞ –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ", callback_data="admin_manage_categories")],
                [InlineKeyboardButton(text=get_text(message.from_user.id, "back_to_admin"), callback_data="admin_panel")]
            ]
        )
        await message.answer(
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è–∏ '{escape_html(category_name)}'</b> –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç —ç“∑–æ–¥ —à—É–¥!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_category_image: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))
        if 'session' in locals():
            session.close()
        await state.clear()
        

@dp.callback_query(lambda c: c.data == "admin_delete_category")
async def admin_delete_category(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer(get_text(callback.from_user.id, "no_access"))
        await callback.answer()
        return
    try:
        session = Session()
        categories = session.query(Category).all()
        session.close()

        if not categories:
            await callback.message.answer(get_text(callback.from_user.id, "no_categories"))
            await callback.answer()
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=category.name, callback_data=f"delete_category_{category.id}")]
                for category in categories
            ]
        )
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ë–æ–∑–≥–∞—à—Ç –±–∞ –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ", callback_data="admin_manage_categories")])

        await callback.message.answer("<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ä–æ –±–∞—Ä–æ–∏ “≥–∞–∑—Ñ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:</b>", reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä admin_delete_category: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("delete_category_"))
async def confirm_delete_category(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer(get_text(callback.from_user.id, "no_access"))
        await callback.answer()
        return
    try:
        category_id = int(callback.data.split("_")[-1])
        session = Session()
        category = session.query(Category).filter_by(id=category_id).first()

        if not category:
            session.close()
            await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —ë—Ñ—Ç –Ω–∞—à—É–¥!")
            await callback.answer()
            return

        products = session.query(Product).filter_by(category_id=category_id).all()
        for product in products:
            product.category_id = None

        session.delete(category)
        session.commit()
        session.close()

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="“≤–∞–∑—Ñ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–∏ –¥–∏–≥–∞—Ä", callback_data="admin_delete_category")],
                [InlineKeyboardButton(text="–ë–∞ –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ", callback_data="admin_manage_categories")],
                [InlineKeyboardButton(text=get_text(callback.from_user.id, "back_to_admin"), callback_data="admin_panel")]
            ]
        )
        await callback.message.answer(
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è–∏ '{escape_html(category.name)}'</b> “≥–∞–∑—Ñ —à—É–¥ –≤–∞ –º–∞“≥—Å—É–ª–æ—Ç –±–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–∏ –ø–µ—à—Ñ–∞—Ä–∑ –≥—É–∑–∞—Ä–æ–Ω–∏–¥–∞ —à—É–¥–∞–Ω–¥!",
            reply_markup=keyboard, parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä confirm_delete_category: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()
        if 'session' in locals():
            session.close()


@dp.callback_query(lambda c: c.data.startswith("view_product_"))
async def view_product(callback: types.CallbackQuery):
    try:
        product_id = int(callback.data.split("_")[-1])
        session = Session()
        product = session.query(Product).filter_by(id=product_id).first()
        session.close()

        if not product:
            await callback.message.answer(get_text(callback.from_user.id, "product_not_found"))
            await callback.answer()
            return

        caption = (
            f"<b>{escape_html(product.name)}</b>\n"
            f"{escape_html(product.description or '–¢–∞–≤—Å–∏—Ñ –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç')}\n"
            f"üíµ {get_text(callback.from_user.id, 'price')}: {product.price} —Å–æ–º–æ–Ω”£"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=get_text(callback.from_user.id, "add_to_cart_button", name=escape_html(product.name)),
                callback_data=f"add_to_cart_{product.id}"
            )],
            [InlineKeyboardButton(
                text=get_text(callback.from_user.id, "back_to_categories"),
                callback_data="back_to_menu"
            )]
        ])

        await callback.message.answer(caption, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä view_product: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()
        if 'session' in locals():
            session.close()
            
@dp.message(lambda message: message.text == get_text(message.from_user.id, "feedback"))
async def request_feedback(message: types.Message, state: FSMContext):
    try:
        await message.answer(get_text(message.from_user.id, "send_feedback"))
        await state.set_state(FeedbackForm.feedback_text)
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä request_feedback: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))

@dp.message(FeedbackForm.feedback_text)
async def process_feedback(message: types.Message, state: FSMContext):
    try:
        feedback_text = message.text.strip()
        if not feedback_text:
            await message.answer(get_text(message.from_user.id, "feedback_empty"))
            return

        session = Session()
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        session.close()

        feedback_notification = get_text(
            message.from_user.id,
            "feedback_notification",
            first_name=escape_html(user.first_name or ""),
            username=escape_html(user.username or ""),
            feedback_text=escape_html(feedback_text),
            date=datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
        )

        try:
            await bot.send_message(chat_id=GROUP_CHAT_ID, text=feedback_notification, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–•–∞—Ç–æ –¥–∞—Ä —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ñ–∏–∫—Ä—É –º—É–ª–æ“≥–∏–∑–∞ –±–∞ –≥—É—Ä—É“≥: {str(e)}")
            await message.answer(get_text(message.from_user.id, "group_notification_error", error=str(e)), parse_mode="HTML")

        response = (
            f"{get_text(message.from_user.id, 'feedback_sent')}\n\n"
            f"üìå –ú–æ —Ñ–∏–∫—Ä—É –º—É–ª–æ“≥–∏–∑–∞–∏ —à—É–º–æ—Ä–æ –±–∞—Ä–æ–∏ –±–µ“≥—Ç–∞—Ä –∫–∞—Ä–¥–∞–Ω–∏ —Ö–∏–∑–º–∞—Ç—Ä–∞—Å–æ–Ω–∏“≥–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –º–µ–±–∞—Ä–µ–º!\n"
            f"–ß–∏—Ä–æ –Ω–∞–≤–±–∞—Ç”£ –∏–Ω—Ç–∏—Ö–æ–± –º–µ–∫—É–Ω–µ–¥?"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=get_text(message.from_user.id, "menu"), callback_data="back_to_menu")],
            [InlineKeyboardButton(text=get_text(message.from_user.id, "cart"), callback_data="view_cart")],
            [InlineKeyboardButton(text=get_text(message.from_user.id, "back_to_main"), callback_data="back_to_main")]
        ])
        await message.answer(response, reply_markup=keyboard, parse_mode="HTML")
        await state.clear()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_feedback: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))
        await state.clear()                                


@dp.callback_query(lambda c: c.data == "show_address")
async def show_address(callback: types.CallbackQuery):
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=get_text(callback.from_user.id, "back_to_main"), callback_data="back_to_main")]
        ])
        await callback.message.answer(
            get_text(callback.from_user.id, "address_text"),
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä show_address: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"), parse_mode="HTML")
        await callback.answer()

@dp.callback_query(lambda c: c.data == "show_contacts")
async def show_contacts(callback: types.CallbackQuery):
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì± WhatsApp (+992900585249)", url="https://wa.me/+992900585249")],
            [InlineKeyboardButton(text="üì± WhatsApp (+992877808002)", url="https://wa.me/+992877808002")],
            [InlineKeyboardButton(text=get_text(callback.from_user.id, "back_to_main"), callback_data="back_to_main")]
        ])
        await callback.message.answer(
            get_text(callback.from_user.id, "contacts_text"),
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä show_contacts: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"), parse_mode="HTML")
        await callback.answer()
        

@dp.callback_query(lambda c: c.data == "admin_update_product")
async def show_products_to_update(callback: types.CallbackQuery):
    try:
        session = Session()
        products = session.query(Product).all()
        if not products:
            await callback.message.answer(get_text(callback.from_user.id, "no_products"))
            session.close()
            await callback.answer()
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{product.name} ({product.price} —Å–æ–º–æ–Ω”£)", callback_data=f"update_product_{product.id}")]
            for product in products
        ])
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=get_text(callback.from_user.id, "back_to_main"), callback_data="back_to_main")])
        
        await callback.message.answer(get_text(callback.from_user.id, "select_product_to_update"), reply_markup=keyboard)
        session.close()
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä show_products_to_update: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()
        
@dp.callback_query(lambda c: c.data.startswith("update_product_"))
async def start_update_product(callback: types.CallbackQuery, state: FSMContext):
    try:
        product_id = int(callback.data.split("_")[-1])
        await state.update_data(product_id=product_id)
        await callback.message.answer(get_text(callback.from_user.id, "update_product_name"))
        await state.set_state(UpdateProductForm.name)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä start_update_product: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()

@dp.message(UpdateProductForm.name)
async def process_product_name(message: types.Message, state: FSMContext):
    try:
        await state.update_data(name=message.text.strip())
        await message.answer(get_text(message.from_user.id, "update_product_description"))
        await state.set_state(UpdateProductForm.description)
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_product_name: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))

@dp.message(UpdateProductForm.description)
async def process_product_description(message: types.Message, state: FSMContext):
    try:
        if message.text == get_text(message.from_user.id, "skip"):
            await state.update_data(description=None)
        else:
            await state.update_data(description=message.text.strip())
        await message.answer(get_text(message.from_user.id, "update_product_price"))
        await state.set_state(UpdateProductForm.price)
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_product_description: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))

@dp.message(UpdateProductForm.price)
async def process_product_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.strip())
        if price <= 0:
            await message.answer(get_text(message.from_user.id, "invalid_price"))
            return
        await state.update_data(price=price)
        
        session = Session()
        categories = session.query(Category).all()
        session.close()

        if not categories:
            await message.answer(get_text(message.from_user.id, "no_categories"))
            await state.clear()
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=category.name, callback_data=f"update_category_{category.id}")]
            for category in categories
        ])
        await message.answer(get_text(message.from_user.id, "update_product_category"), reply_markup=keyboard)
        await state.set_state(UpdateProductForm.category)
    except ValueError:
        await message.answer(get_text(message.from_user.id, "invalid_price"))
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_product_price: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))

@dp.callback_query(lambda c: c.data.startswith("update_category_"))
async def process_product_category(callback: types.CallbackQuery, state: FSMContext):
    try:
        category_id = int(callback.data.split("_")[-1])
        await state.update_data(category_id=category_id)
        await callback.message.answer(
            get_text(callback.from_user.id, "update_product_image"),
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=get_text(callback.from_user.id, "skip"))]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        await state.set_state(UpdateProductForm.image)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_product_category: {str(e)}")
        await callback.message.answer(get_text(callback.from_user.id, "error"))
        await callback.answer()

@dp.message(UpdateProductForm.image)
async def process_product_image(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        product_id = data["product_id"]
        name = data["name"]
        description = data["description"]
        price = data["price"]
        category_id = data["category_id"]
        image_id = None

        if message.text == get_text(message.from_user.id, "skip"):
            image_id = None
        elif message.photo and message.photo[-1].file_id:
            image_id = message.photo[-1].file_id
        else:
            await message.answer(get_text(message.from_user.id, "error"))
            return

        session = Session()
        product = session.query(Product).filter_by(id=product_id).first()
        if not product:
            await message.answer(get_text(message.from_user.id, "error"))
            session.close()
            await state.clear()
            return

        product.name = name
        product.description = description
        product.price = price
        product.category_id = category_id
        if image_id:
            product.image_id = image_id

        session.commit()
        session.close()

        await message.answer(
            get_text(message.from_user.id, "product_updated"),
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_product_image: {str(e)}")
        await message.answer(get_text(message.from_user.id, "error"))
        await state.clear()
        
        
        
@dp.message(lambda message: message.text == get_text(message.from_user.id, "contact_info"))
async def contact_info(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text(message.from_user.id, "address"), callback_data="show_address")],
        [InlineKeyboardButton(text=get_text(message.from_user.id, "contacts"), callback_data="show_contacts")]
    ])
    await message.answer(get_text(message.from_user.id, "choose_contact_info"), reply_markup=keyboard)

   
                                

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())