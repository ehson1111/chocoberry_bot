import asyncio
import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy import create_engine, Column, Integer, String, Float, ForeignKey, DateTime
from sqlalchemy.orm import declarative_base, sessionmaker, relationship
from datetime import datetime
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.exc import IntegrityError

# –¢–∞–Ω–∑–∏–º–æ—Ç–∏ logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ë–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ —Ç–∞“ì–π–∏—Ä—ë–±–∞–Ω–¥–∞“≥–æ–∏ –º—É“≥–∏—Ç
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")
if not TOKEN:
    raise ValueError("BOT_TOKEN –¥–∞—Ä –º—É“≥–∏—Ç –º—É–∞–π—è–Ω –Ω–∞—à—É–¥–∞–∞—Å—Ç!")
if not GROUP_CHAT_ID:
    raise ValueError("GROUP_CHAT_ID –¥–∞—Ä –º—É“≥–∏—Ç –º—É–∞–π—è–Ω –Ω–∞—à—É–¥–∞–∞—Å—Ç!")

# –¢–∞–Ω–∑–∏–º–∏ –±–æ—Ç –≤–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –¢–∞–Ω–∑–∏–º–∏ SQLAlchemy
Base = declarative_base()
engine = create_engine("sqlite:///chocoberry.db", echo=False)
Session = sessionmaker(bind=engine)

# –ú–æ–¥–µ–ª“≥–æ
class Category(Base):
    __tablename__ = "category"
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, nullable=False, unique=True)
    products = relationship("Product", back_populates="category")

class Product(Base):
    __tablename__ = "product"
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, nullable=False)
    description = Column(String)
    price = Column(Float, nullable=False)
    category_id = Column(Integer, ForeignKey("category.id"), nullable=True)
    category = relationship("Category", back_populates="products")
    image_id = Column(String, nullable=True)
    carts = relationship("Cart", back_populates="product")
    orders = relationship("Order", back_populates="product")

class User(Base):
    __tablename__ = "user"
    telegram_id = Column(Integer, primary_key=True)
    username = Column(String)
    first_name = Column(String)
    last_name = Column(String)
    profile = relationship("UserProfile", uselist=False, back_populates="user")
    carts = relationship("Cart", back_populates="user")
    cashback = relationship("Cashback", uselist=False, back_populates="user")
    orders = relationship("Order", back_populates="user")

class UserProfile(Base):
    __tablename__ = "userprofile"
    telegram_id = Column(Integer, ForeignKey("user.telegram_id"), primary_key=True)
    phone_number = Column(String)
    address = Column(String)
    user = relationship("User", back_populates="profile")

class Cart(Base):
    __tablename__ = "cart"
    id = Column(Integer, primary_key=True, autoincrement=True)
    telegram_id = Column(Integer, ForeignKey("user.telegram_id"))
    product_id = Column(Integer, ForeignKey("product.id"))
    quantity = Column(Integer, nullable=False)
    user = relationship("User", back_populates="carts")
    product = relationship("Product", back_populates="carts")

class Order(Base):
    __tablename__ = "order"
    id = Column(Integer, primary_key=True, autoincrement=True)
    telegram_id = Column(Integer, ForeignKey("user.telegram_id"))
    product_id = Column(Integer, ForeignKey("product.id"))
    quantity = Column(Integer, nullable=False)
    total = Column(Float, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    user = relationship("User", back_populates="orders")
    product = relationship("Product", back_populates="orders")

class Cashback(Base):
    __tablename__ = "cashback"
    telegram_id = Column(Integer, ForeignKey("user.telegram_id"), primary_key=True)
    amount = Column(Float, default=0.0)
    user = relationship("User", back_populates="cashback")

# –°–æ—Ö—Ç–∞–Ω–∏ “∑–∞–¥–≤–∞–ª“≥–æ
Base.metadata.create_all(engine)

# –ú–æ—à–∏–Ω“≥–æ–∏ –≤–∞–∑—ä–∏—è—Ç
class ProfileForm(StatesGroup):
    phone = State()
    address = State()

class AdminProductForm(StatesGroup):
    name = State()
    description = State()
    price = State()
    category = State()
    image = State()
    
# –ò–ª–æ–≤–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç




class AdminOrderForm(StatesGroup):
    user = State()
    product = State()
    quantity = State()

class AdminCategoryForm(StatesGroup):
    name = State()

# –§—É–Ω–∫—Å–∏—è–∏ —Ç–æ–∑–∞–∫—É–Ω”£ –±–∞—Ä–æ–∏ HTML
def escape_html(text: str) -> str:
    if text is None:
        return ""
    return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')

# –°–∞–Ω“∑–∏—à–∏ –∞–¥–º–∏–Ω
def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

# –§–∞—Ä–º–æ–Ω–∏ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    try:
        session = Session()
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user:
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name or None
            )
            session.add(user)
            session.add(Cashback(telegram_id=message.from_user.id, amount=0.0))
            try:
                session.commit()
            except Exception as e:
                session.rollback()
                logger.error(f"–•–∞—Ç–æ “≥–∞–Ω–≥–æ–º–∏ —Å–∞–±—Ç–∏ –∫–æ—Ä–±–∞—Ä: {str(e)}")
                await message.answer("–•–∞—Ç–æ –¥–∞—Ä —Å–∞–±—Ç–∏ –∫–æ—Ä–±–∞—Ä, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥!")
                session.close()
                return
        session.close()

        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üç´ –ú–µ–Ω—é"), KeyboardButton(text="üõí –°–∞–±–∞–¥")],
                [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª"), KeyboardButton(text="üí∞ –ö—ç—à–±—ç–∫")],
                [KeyboardButton(text="üìú –¢–∞—ä—Ä–∏—Ö–∏ —Ñ–∞—Ä–º–æ–∏—à“≥–æ"),KeyboardButton(text= "üè™ –ê–¥—Ä–µ—Å"),KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")]
                
                
            ] + ([[KeyboardButton(text="üîß –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω")] if is_admin(message.from_user.id) else []]),
            resize_keyboard=True
        )
        await message.answer("<b>üç´üçì –•—É—à –æ–º–∞–¥–µ–¥ –±–∞ ChocoBerry!</b>\n–Ø–∫ –∞–º–∞–ª—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä start_command: {str(e)}")
        await message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥!")
        if 'session' in locals():
            session.close()
            

# –ù–∞–º–æ–∏—à–∏ –º–µ–Ω—é
@dp.message(lambda message: message.text == "üç´ –ú–µ–Ω—é")
async def show_menu(message: types.Message):
    try:
        session = Session()
        categories = session.query(Category).all()
        session.close()

        if not categories:
            await message.answer("–Ø–≥–æ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç!")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=category.name, callback_data=f"category_{category.id}")]
            for category in categories
        ])
        await message.answer("üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä show_menu: {str(e)}")
        await message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥!")

# –ù–∞–º–æ–∏—à–∏ –º–∞“≥—Å—É–ª–æ—Ç“≥–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
@dp.callback_query(lambda c: c.data.startswith("category_"))
async def show_category_products(callback: types.CallbackQuery):
    try:
        category_id = int(callback.data.split("_")[-1])
        session = Session()
        category = session.query(Category).filter_by(id=category_id).first()
        products = session.query(Product).filter_by(category_id=category_id).all()
        session.close()

        if not category:
            await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —ë—Ñ—Ç –Ω–∞—à—É–¥!")
            await callback.answer()
            return

        response = f"üç´üçì <b>{escape_html(category.name)}</b>\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for product in products:
            response += f"‚û°Ô∏è <b>{escape_html(product.name)}</b> - ${product.price}\n"
            response += f"<i>{escape_html(product.description or '')}</i>\n\n"
            if product.image_id:
                try:
                    await callback.message.answer_photo(
                        photo=product.image_id,
                        caption=f"<b>{escape_html(product.name)}</b>\n{escape_html(product.description or '')}\nüíµ –ù–∞—Ä—Ö: ${product.price}",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"–•–∞—Ç–æ “≥–∞–Ω–≥–æ–º–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ç–∞—Å–≤–∏—Ä –±–∞—Ä–æ–∏ –º–∞“≥—Å—É–ª–æ—Ç {product.name}: {str(e)}")
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"üì• –ò–ª–æ–≤–∞ –±–∞ —Å–∞–±–∞–¥: {escape_html(product.name)}",
                    callback_data=f"add_to_cart_{product.id}"
                )
            ])

        keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ë–æ–∑–≥–∞—à—Ç –±–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ", callback_data="back_to_categories")])
        await callback.message.answer(response, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä show_category_products: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥!")
        await callback.answer()
        if 'session' in locals():
            session.close()

# –ë–æ–∑–≥–∞—à—Ç –±–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ
@dp.callback_query(lambda c: c.data == "back_to_categories")
async def back_to_categories(callback: types.CallbackQuery):
    try:
        session = Session()
        categories = session.query(Category).all()
        session.close()

        if not categories:
            await callback.message.answer("–Ø–≥–æ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç!")
            await callback.answer()
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=category.name, callback_data=f"category_{category.id}")]
            for category in categories
        ])
        await callback.message.answer("üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä back_to_categories: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥!")
        await callback.answer()

# –ò–ª–æ–≤–∞ –±–∞ —Å–∞–±–∞–¥
@dp.callback_query(lambda c: c.data.startswith("add_to_cart_"))
async def add_to_cart(callback: types.CallbackQuery):
    try:
        product_id = int(callback.data.split("_")[-1])
        session = Session()
        cart_item = Cart(
            telegram_id=callback.from_user.id,
            product_id=product_id,
            quantity=1
        )
        session.add(cart_item)
        session.commit()
        session.close()
        await callback.message.answer("–ë–∞ —Å–∞–±–∞–¥ –∏–ª–æ–≤–∞ —à—É–¥!")
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä add_to_cart: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥!")
        await callback.answer()
        if 'session' in locals():
            session.close()

# –ù–∞–º–æ–∏—à–∏ —Å–∞–±–∞–¥
@dp.message(lambda message: message.text == "üõí –°–∞–±–∞–¥")
async def view_cart(message: types.Message):
    try:
        session = Session()
        cart_items = session.query(Cart, Product).join(Product).filter(Cart.telegram_id == message.from_user.id).all()
        profile = session.query(UserProfile).filter_by(telegram_id=message.from_user.id).first()
        cashback = session.query(Cashback).filter_by(telegram_id=message.from_user.id).first()
        session.close()

        if not cart_items:
            await message.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç!")
            return

        if not profile:
            await message.answer("–õ—É—Ç—Ñ–∞–Ω, –∞–≤–≤–∞–ª –ø—Ä–æ—Ñ–∏–ª–∏ —Ö—É–¥—Ä–æ –ø—É—Ä –∫—É–Ω–µ–¥ (—Ä–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤–∞ —Å—É—Ä–æ“ì–∞)!")
            return

        total = 0
        response = "<b>üõí –°–∞–±–∞–¥–∏ —à—É–º–æ:</b>\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for cart_item, product in cart_items:
            item_total = product.price * cart_item.quantity
            total += item_total
            response += f"{escape_html(product.name)} x{cart_item.quantity} - ${item_total}\n"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="‚ûï", callback_data=f"increase_quantity_{cart_item.id}"),
                InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_quantity_{cart_item.id}"),
                InlineKeyboardButton(text="üóë –•–æ—Ä–∏“∑", callback_data=f"remove_from_cart_{cart_item.id}")
            ])

        response += f"<b>“≤–∞–º–∞–≥”£:</b> ${total}\n"
        response += f"<b>–ö—ç—à–±—ç–∫–∏ –¥–∞—Å—Ç—Ä–∞—Å:</b> ${cashback.amount if cashback else 0.0}\n"
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="–¢–∞—Å–¥–∏“õ–∏ —Ñ–∞—Ä–º–æ–∏—à", callback_data="confirm_order")])
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="–ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∫—ç—à–±—ç–∫", callback_data="use_cashback")])

        await message.answer(response, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä view_cart: {str(e)}")
        await message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥!")

# –ó–∏—ë–¥ –∫–∞—Ä–¥–∞–Ω–∏ –º–∏“õ–¥–æ—Ä
@dp.callback_query(lambda c: c.data.startswith("increase_quantity_"))
async def increase_quantity(callback: types.CallbackQuery):
    try:
        cart_item_id = int(callback.data.split("_")[-1])
        session = Session()
        cart_item = session.query(Cart).filter_by(id=cart_item_id).first()
        if cart_item:
            cart_item.quantity += 1
            session.commit()
            await callback.message.answer("–ú–∏“õ–¥–æ—Ä –∑–∏—ë–¥ –∫–∞—Ä–¥–∞ —à—É–¥!")
            await view_cart(callback.message)
        else:
            await callback.message.answer("–ê—à—ë –¥–∞—Ä —Å–∞–±–∞–¥ —ë—Ñ—Ç –Ω–∞—à—É–¥!")
        session.close()
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä increase_quantity: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥!")
        await callback.answer()
        if 'session' in locals():
            session.close()

# –ö–∞–º –∫–∞—Ä–¥–∞–Ω–∏ –º–∏“õ–¥–æ—Ä
@dp.callback_query(lambda c: c.data.startswith("decrease_quantity_"))
async def decrease_quantity(callback: types.CallbackQuery):
    try:
        cart_item_id = int(callback.data.split("_")[-1])
        session = Session()
        cart_item = session.query(Cart).filter_by(id=cart_item_id).first()
        if cart_item:
            if cart_item.quantity > 1:
                cart_item.quantity -= 1
                session.commit()
                await callback.message.answer("–ú–∏“õ–¥–æ—Ä –∫–∞–º –∫–∞—Ä–¥–∞ —à—É–¥!")
            else:
                session.delete(cart_item)
                session.commit()
                await callback.message.answer("–ê—à—ë –∞–∑ —Å–∞–±–∞–¥ —Ö–æ—Ä–∏“∑ —à—É–¥!")
            await view_cart(callback.message)
        else:
            await callback.message.answer("–ê—à—ë –¥–∞—Ä —Å–∞–±–∞–¥ —ë—Ñ—Ç –Ω–∞—à—É–¥!")
        session.close()
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä decrease_quantity: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥!")
        await callback.answer()
        if 'session' in locals():
            session.close()

# –•–æ—Ä–∏“∑ –∞–∑ —Å–∞–±–∞–¥
@dp.callback_query(lambda c: c.data.startswith("remove_from_cart_"))
async def remove_from_cart(callback: types.CallbackQuery):
    try:
        cart_item_id = int(callback.data.split("_")[-1])
        session = Session()
        cart_item = session.query(Cart).filter_by(id=cart_item_id).first()
        if cart_item:
            session.delete(cart_item)
            session.commit()
            await callback.message.answer("–ê—à—ë –∞–∑ —Å–∞–±–∞–¥ —Ö–æ—Ä–∏“∑ —à—É–¥!")
            await view_cart(callback.message)
        else:
            await callback.message.answer("–ê—à—ë –¥–∞—Ä —Å–∞–±–∞–¥ —ë—Ñ—Ç –Ω–∞—à—É–¥!")
        session.close()
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä remove_from_cart: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥!")
        await callback.answer()
        if 'session' in locals():
            session.close()

# –¢–∞—ä—Ä–∏—Ö–∏ —Ñ–∞—Ä–º–æ–∏—à“≥–æ
@dp.message(lambda message: message.text == "üìú –¢–∞—ä—Ä–∏—Ö–∏ —Ñ–∞—Ä–º–æ–∏—à“≥–æ")
async def view_order_history(message: types.Message):
    try:
        session = Session()
        orders = session.query(Order, Product).join(Product, Order.product_id == Product.id, isouter=True).filter(Order.telegram_id == message.from_user.id).all()
        session.close()

        if not orders:
            await message.answer("–®—É–º–æ —è–≥–æ–Ω —Ñ–∞—Ä–º–æ–∏—à –Ω–∞–¥–æ—Ä–µ–¥! üòî –õ—É—Ç—Ñ–∞–Ω, –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –±–∞ —Å–∞–±–∞–¥ –∏–ª–æ–≤–∞ –∫—É–Ω–µ–¥ –≤–∞ —Ñ–∞—Ä–º–æ–∏—à –¥–∏“≥–µ–¥.")
            return

        response = "<b>üìú –¢–∞—ä—Ä–∏—Ö–∏ —Ñ–∞—Ä–º–æ–∏—à“≥–æ–∏ —à—É–º–æ:</b>\n\n"
        for order, product in orders:
            product_name = escape_html(product.name) if product else "–ú–∞“≥—Å—É–ª–æ—Ç —Ö–∞–∑—Ñ —à—É–¥–∞–∞—Å—Ç"
            response += f"–§–∞—Ä–º–æ–∏—à #{order.id}\n"
            response += f"–ú–∞“≥—Å—É–ª–æ—Ç: {product_name}\n"
            response += f"–ú–∏“õ–¥–æ—Ä: {order.quantity}\n"
            response += f"“≤–∞–º–∞–≥”£: ${order.total}\n"
            response += f"–°–∞–Ω–∞: {order.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n\n"

        try:
            await message.answer(response, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–•–∞—Ç–æ–∏ —Ç–∞“≥–ª–∏–ª–∏ HTML –¥–∞—Ä view_order_history: {str(e)}")
            await message.answer(response)  # –ë–µ parse_mode
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä view_order_history: {str(e)}")
        await message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥! üòû")
        if 'session' in locals():
            session.close()

# –¢–∞—Å–¥–∏“õ–∏ —Ñ–∞—Ä–º–æ–∏—à
@dp.callback_query(lambda c: c.data == "confirm_order")
async def confirm_order(callback: types.CallbackQuery):
    try:
        session = Session()
        # –°–∞–Ω“∑–∏—à–∏ –≤—É“∑—É–¥–∏ –∫–æ—Ä–±–∞—Ä
        user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
        if not user:
            user = User(
                telegram_id=callback.from_user.id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name,
                last_name=callback.from_user.last_name or None
            )
            session.add(user)
            session.add(Cashback(telegram_id=callback.from_user.id, amount=0.0))
            session.commit()

        cart_items = session.query(Cart, Product).join(Product).filter(Cart.telegram_id == callback.from_user.id).all()
        profile = session.query(UserProfile).filter_by(telegram_id=callback.from_user.id).first()
        if not cart_items:
            session.close()
            await callback.message.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª! üõí")
            await callback.answer()
            return

        if not profile:
            session.close()
            await callback.message.answer("–õ—É—Ç—Ñ–∞–Ω, –∞–≤–≤–∞–ª –ø—Ä–æ—Ñ–∏–ª–∏ —Ö—É–¥—Ä–æ –ø—É—Ä –∫—É–Ω–µ–¥! üìã")
            await callback.answer()
            return

        total = sum(product.price * cart_item.quantity for cart_item, product in cart_items)
        cashback_amount = total * 0.05

        order_details = "üì¶ –§–∞—Ä–º–æ–∏—à–∏ –Ω–∞–≤:\n\n"
        order_details += f"üë§ –ö–æ—Ä–±–∞—Ä: {escape_html(user.first_name)} (@{escape_html(user.username or '')})\n"
        order_details += f"üìû –†–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω:: {escape_html(profile.phone_number)}\n"
        order_details += f"üè† –°—É—Ä–æ“ì–∞: {escape_html(profile.address)}\n"
        order_details += "üç´ –ú–∞“≥—Å—É–ª–æ—Ç“≥–æ:\n"
        for cart_item, product in cart_items:
            order = Order(
                telegram_id=callback.from_user.id,
                product_id=product.id,
                quantity=cart_item.quantity,
                total=product.price * cart_item.quantity
            )
            session.add(order)
            item_total = product.price * cart_item.quantity
            order_details += f"{escape_html(product.name)} x{cart_item.quantity} - ${item_total}\n"

        order_details += f"üíµ “≤–∞–º–∞–≥”£: ${total}\n"
        order_details += f"üí∞ –ö—ç—à–±—ç–∫–∏ –±–∞–¥–∞—Å—Ç–æ–≤–∞—Ä–¥–∞: ${cashback_amount}\n"
        order_details += f"üìÖ –°–∞–Ω–∞: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}"

        cashback = session.query(Cashback).filter_by(telegram_id=callback.from_user.id).first()
        if not cashback:
            cashback = Cashback(telegram_id=callback.from_user.id, amount=0.0)
            session.add(cashback)
        cashback.amount += cashback_amount

        session.query(Cart).filter(Cart.telegram_id == callback.from_user.id).delete()
        session.commit()
        session.close()

        try:
            await bot.send_message(chat_id=GROUP_CHAT_ID, text=order_details)
        except Exception as e:
            logger.error(f"–•–∞—Ç–æ –¥–∞—Ä —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –æ–≥–æ“≥”£ –±–∞ –≥—É—Ä—É“≥: {str(e)}")
            await callback.message.answer(f"–•–∞—Ç–æ –¥–∞—Ä —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –æ–≥–æ“≥”£ –±–∞ –≥—É—Ä—É“≥: {str(e)}")

        await callback.message.answer("<b>‚úÖ –§–∞—Ä–º–æ–∏—à–∏ —à—É–º–æ —Ç–∞—Å–¥–∏“õ —à—É–¥!</b> –°–∞–±–∞–¥ —Ö–æ–ª –∫–∞—Ä–¥–∞ —à—É–¥.", parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä confirm_order: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥! üòû")
        await callback.answer()
        if 'session' in locals():
            session.close()

# –ü—Ä–æ—Ñ–∏–ª
@dp.message(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª")
async def setup_profile(message: types.Message, state: FSMContext):
    try:
        session = Session()
        profile = session.query(UserProfile).filter_by(telegram_id=message.from_user.id).first()
        session.close()

        if profile:
            response = f"–ü—Ä–æ—Ñ–∏–ª–∏ —à—É–º–æ:\n–†–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω: {escape_html(profile.phone_number)}\n–°—É—Ä–æ“ì–∞: {escape_html(profile.address)}"
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–¢–∞“ì–π–∏—Ä –¥–æ–¥–∞–Ω", callback_data="edit_profile")],
                    [InlineKeyboardButton(text="–ë–∞ –º–µ–Ω—é–∏ –∞—Å–æ—Å”£", callback_data="back_to_main")]
                ]
            )
            await message.answer(response, reply_markup=keyboard)
        else:
            await message.answer("–õ—É—Ç—Ñ–∞–Ω, —Ä–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
            await state.set_state(ProfileForm.phone)
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä setup_profile: {str(e)}")
        await message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥!")

@dp.callback_query(lambda c: c.data == "edit_profile")
async def edit_profile(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–õ—É—Ç—Ñ–∞–Ω, —Ä–∞—Å–∏ –Ω–∞–≤–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
    await state.set_state(ProfileForm.phone)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üç´ –ú–µ–Ω—é"), KeyboardButton(text="üõí –°–∞–±–∞–¥")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª"), KeyboardButton(text="üí∞ –ö—ç—à–±—ç–∫")],
            [KeyboardButton(text="üìú –¢–∞—ä—Ä–∏—Ö–∏ —Ñ–∞—Ä–º–æ–∏—à“≥–æ")]
        ] + [[KeyboardButton(text="üîß –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω")] if is_admin(callback.from_user.id) else []],
        resize_keyboard=True
    )
    await callback.message.answer("‚úÖ –ë–∞ –º–µ–Ω—é–∏ –∞—Å–æ—Å”£ –±–∞—Ä–≥–∞—à—Ç–µ–¥:", reply_markup=keyboard)
    await callback.answer()

@dp.message(ProfileForm.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–õ—É—Ç—Ñ–∞–Ω, —Å—É—Ä–æ“ì–∞—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
    await state.set_state(ProfileForm.address)

@dp.message(ProfileForm.address)
async def process_address(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        phone = data["phone"]
        address = message.text
        session = Session()
        profile = session.query(UserProfile).filter_by(telegram_id=message.from_user.id).first()
        if profile:
            profile.phone_number = phone
            profile.address = address
        else:
            profile = UserProfile(telegram_id=message.from_user.id, phone_number=phone, address=message.text)
            session.add(profile)
        session.commit()
        session.close()
        await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª –Ω–∞–≤—Å–æ–∑”£ —à—É–¥!")
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üç´ –ú–µ–Ω—é"), KeyboardButton(text="üõí –°–∞–±–∞–¥")],
                [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª"), KeyboardButton(text="üí∞ –ö—ç—à–±—ç–∫")],
                [KeyboardButton(text="üìú –¢–∞—ä—Ä–∏—Ö–∏ —Ñ–∞—Ä–º–æ–∏—à")]
            ] + [[KeyboardButton(text="üîß –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω")] if is_admin(message.from_user.id) else []],
            resize_keyboard=True
        )
        await message.answer("–ë–∞ –º–µ–Ω—é–∏ –∞—Å–æ—Å”£:", reply_markup=keyboard)
        await state.clear()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_address: {str(e)}")
        await message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫—É—à –∫—É–Ω–µ–¥!")
        await state.clear()

# –ö—ç—à–±—ç–∫
@dp.message(lambda message: message.text == "üí∞ –ö—ç—à–±—ç–∫")
async def check_cashback(message: types.Message):
    try:
        session = Session()
        cashback = session.query(Cashback).filter_by(telegram_id=message.from_user.id).first()
        session.close()
        await message.answer(f"<b>üí∞ –ë–∞“õ–∏—è–∏ –∫—ç—à–±—ç–∫–∏ —à—É–º–æ:</b> ${cashback.amount if cashback else 0.0}", parse_mode="HTML")
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä check_cashback: {str(e)}")
        await message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫—É—à –∫—É–Ω–µ–¥!")

@dp.callback_query(lambda c: c.data == "use_cashback")
async def use_cashback(callback: types.CallbackQuery):
    try:
        session = Session()
        cashback = session.query(Cashback).filter_by(telegram_id=callback.from_user.id).first()
        cart_items = session.query(Cart, Product).join(Product).filter(Cart.telegram_id == callback.from_user.id).all()

        if not cart_items:
            session.close()
            await callback.message.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç!")
            await callback.answer()
            return

        total = sum(product.price * cart_item.quantity for cart_item, product in cart_items)

        if not cashback or cashback.amount == 0:
            session.close()
            await callback.message.answer("–®—É–º–æ –∫—ç—à–±—ç–∫ –Ω–∞–¥–æ—Ä–µ–¥!")
            await callback.answer()
            return

        if cashback.amount >= total:
            cashback.amount -= total
            total = 0
        else:
            total -= cashback.amount
            cashback.amount = 0

        session.commit()
        session.close()

        await callback.message.answer(f"<b>–ö—ç—à–±—ç–∫ –∏—Å—Ç–∏—Ñ–æ–¥–∞ —à—É–¥!</b>\n–ë–∞“õ–∏—è–∏ –Ω–∞–≤: ${cashback.amount}\n–ú–∞–±–ª–∞“ì–∏ –±–æ“õ–∏–º–æ–Ω–¥–∞: ${total}", parse_mode="HTML")
        await view_cart(callback.message)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä use_cashback: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫—É—à –∫—É–Ω–µ–¥!")
        await callback.answer()
        if 'session' in locals():
            session.close()

# –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω
@dp.message(lambda message: message.text == "üîß –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω")
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–®—É–º–æ –¥–∞—Å—Ç—Ä–∞—Å”£ –±–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω –Ω–∞–¥–æ—Ä–µ–¥!")
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ò–ª–æ–≤–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç", callback_data="admin_add_product")],
            [InlineKeyboardButton(text="–ò–ª–æ–≤–∞–∏ —Ñ–∞—Ä–º–æ–∏—à", callback_data="admin_add_order")],
            [InlineKeyboardButton(text="–†”Ø–π—Ö–∞—Ç–∏ —Ñ–∞—Ä–º–æ–∏—à“≥–æ", callback_data="admin_view_orders")],
            [InlineKeyboardButton(text="“≤–∞–∑—Ñ–∏ –º–∞“≥—Å—É–ª–æ—Ç", callback_data="admin_delete_product")],
            [InlineKeyboardButton(text="–ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ", callback_data="admin_manage_categories")]
        ]
    )
    await message.answer("<b>–ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω:</b>", reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "admin_panel")
async def back_to_admin_panel(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer("–®—É–º–æ –¥–∞—Å—Ç—Ä–∞—Å—ó –±–∞!")
        await callback.answer()
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ò–ª–æ–≤–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç", callback_data="admin_add_product")],
            [InlineKeyboardButton(text="–ò–ª–æ–≤–∞–∏ —Ñ–∞—Ä–º–æ–∏—à", callback_data="admin_add_order")],
            [InlineKeyboardButton(text="–†”Ø–π—Ö–∞—Ç–∏ —Ñ–∞—Ä–º–æ–∏—à", callback_data="admin_view_orders")],
            [InlineKeyboardButton(text="“≤–∞–∑—Ñ–∏ –º–∞“≥—Å—É–ª–æ—Ç", callback_data="admin_delete_product")],
            [InlineKeyboardButton(text="–ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="admin_manage_categories")]
        ]
    )
    await callback.message.answer("<b>–ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω:</b>", reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "admin_manage_categories")
async def admin_manage_categories(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer("–®—É–º–æ –¥–∞—Å—Ç—Ä–∞—Å—ó –±–∞!")
        await callback.answer()
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–≠“∑–æ–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="admin_add_category")],
            [InlineKeyboardButton(text="“≤–∞–∑—Ñ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="admin_delete_category")],
            [InlineKeyboardButton(text="üîô –ë–æ–∑–≥–∞—à—Ç –±–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω", callback_data="admin_panel")]
        ]
    )
    await callback.message.answer("<b>–ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b>", reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()



# –§—É–Ω–∫—Å–∏—è–∏ —Ç–æ–∑–∞–∫—É–Ω”£ –±–∞—Ä–æ–∏ HTML
def escape_html(text: str) -> str:
    if text is None:
        return ""
    return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')

# –ò–ª–æ–≤–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç
@dp.callback_query(lambda c: c.data == "admin_add_product")
async def admin_add_product(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.message.answer("–®—É–º–æ –¥–∞—Å—Ç—Ä–∞—Å”£ –±–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω –Ω–∞–¥–æ—Ä–µ–¥!")
        await callback.answer()
        return
    await callback.message.answer("–ù–æ–º–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
    await state.set_state(AdminProductForm.name)
    await callback.answer()

@dp.message(AdminProductForm.name)
async def process_product_name(message: Message, state: FSMContext):
    try:
        name = message.text.strip()
        if not name:
            await message.answer("–ù–æ–º–∏ –º–∞“≥—Å—É–ª–æ—Ç –Ω–∞–±–æ—è–¥ —Ö–æ–ª”£ –±–æ—à–∞–¥! –õ—É—Ç—Ñ–∞–Ω, –Ω–æ–º–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
            return
        await state.update_data(name=name)
        await message.answer("–¢–∞–≤—Å–∏—Ñ–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (—ë /skip –±–∞—Ä–æ–∏ –≥—É–∑–∞—à—Ç–∞–Ω):")
        await state.set_state(AdminProductForm.description)
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_product_name: {str(e)}")
        await message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥!")
        await state.clear()

@dp.message(AdminProductForm.description)
async def process_product_description(message: Message, state: FSMContext):
    try:
        description = None if message.text == "/skip" else message.text.strip()
        await state.update_data(description=description)
        await message.answer("–ù–∞—Ä—Ö–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, 10.5):")
        await state.set_state(AdminProductForm.price)
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_product_description: {str(e)}")
        await message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥!")
        await state.clear()

@dp.message(AdminProductForm.price)
async def process_product_price(message: Message, state: FSMContext):
    try:
        price = float(message.text.strip())
        if price <= 0:
            await message.answer("–ù–∞—Ä—Ö –±–æ—è–¥ –º—É—Å–±–∞—Ç –±–æ—à–∞–¥! –õ—É—Ç—Ñ–∞–Ω, –Ω–∞—Ä—Ö–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, 10.5):")
            return
        await state.update_data(price=price)
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, –î–µ—Å–µ—Ä—Ç):")
        await state.set_state(AdminProductForm.category)
    except ValueError:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω, –Ω–∞—Ä—Ö–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, 10.5):")
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_product_price: {str(e)}")
        await message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥!")
        await state.clear()

@dp.message(AdminProductForm.category)
async def process_product_category(message: Message, state: FSMContext):
    try:
        category_name = message.text.strip()
        if not category_name:
            await message.answer("–ù–æ–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–±–æ—è–¥ —Ö–æ–ª”£ –±–æ—à–∞–¥! –õ—É—Ç—Ñ–∞–Ω, –Ω–æ–º–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
            return
        await state.update_data(category=category_name)
        await message.answer("–¢–∞—Å–≤–∏—Ä–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –±–æ—Ä –∫—É–Ω–µ–¥ (—ë –±–∞—Ä–æ–∏ –≥—É–∑–∞—à—Ç–∞–Ω /skip –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥):")
        await state.set_state(AdminProductForm.image)
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_product_category: {str(e)}")
        await message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥!")
        await state.clear()

@dp.message(AdminProductForm.image)
async def process_product_image(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        image_id = None
        if message.photo:
            image_id = message.photo[-1].file_id
        elif message.text != "/skip":
            await message.answer("–õ—É—Ç—Ñ–∞–Ω, —Ç–∞—Å–≤–∏—Ä –±–æ—Ä –∫—É–Ω–µ–¥ —ë /skip-—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥!")
            return

        session = Session()
        name = escape_html(data["name"])
        description = escape_html(data["description"]) if data["description"] else None
        category_name = escape_html(data["category"])

        category = session.query(Category).filter_by(name=category_name).first()
        if not category:
            category = Category(name=category_name)
            session.add(category)
            session.commit()

        product = Product(
            name=name,
            description=description,
            price=data["price"],
            category_id=category.id,
            image_id=image_id
        )
        session.add(product)
        try:
            session.commit()
        except IntegrityError as e:
            session.rollback()
            logger.error(f"–•–∞—Ç–æ–∏ —Ç–∞–∫—Ä–æ—Ä–∏ –º–∞“≥—Å—É–ª–æ—Ç: {str(e)}")
            await message.answer(f"–ú–∞“≥—Å—É–ª–æ—Ç –±–æ –Ω–æ–º–∏ '{name}' –∞–ª–ª–∞–∫–∞–π –º–∞–≤“∑—É–¥ –∞—Å—Ç! –õ—É—Ç—Ñ–∞–Ω, –Ω–æ–º–∏ –¥–∏–≥–∞—Ä –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥.")
            await state.clear()
            session.close()
            return
        except Exception as e:
            session.rollback()
            logger.error(f"–•–∞—Ç–æ “≥–∞–Ω–≥–æ–º–∏ –∏–ª–æ–≤–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç: {str(e)}")
            await message.answer(f"–•–∞—Ç–æ “≥–∞–Ω–≥–æ–º–∏ –∏–ª–æ–≤–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç: {str(e)}")
            await state.clear()
            session.close()
            return

        session.close()
        await message.answer(f"–ú–∞“≥—Å—É–ª–æ—Ç '<b>{escape_html(name)}</b>' –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–ª–æ–≤–∞ —à—É–¥! ‚úÖ", parse_mode="HTML")
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ò–ª–æ–≤–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç–∏ –¥–∏–≥–∞—Ä", callback_data="admin_add_product")],
                [InlineKeyboardButton(text="–ë–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω", callback_data="admin_panel")]
            ]
        )
        await message.answer("–ê–º–∞–ª–∏ –Ω–∞–≤–±–∞—Ç”£:", reply_markup=keyboard)
        await state.clear()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_product_image: {str(e)}")
        await message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥! üòû")
        await state.clear()
        if 'session' in locals():
            session.close()

# “≤–∞–∑—Ñ–∏ –º–∞“≥—Å—É–ª–æ—Ç
@dp.callback_query(lambda c: c.data == "admin_delete_product")
async def admin_delete_product(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer("–®—É–º–æ –¥–∞—Å—Ç—Ä–∞—Å—ó –±–∞!")
        await callback.answer()
        return

    try:
        session = Session()
        products = session.query(Product).all()
        session.close()

        if not products:
            await callback.message.answer("–Ø–≥–æ–Ω –º–∞“≥—Å—É–ª–æ—Ç –º–∞–≤—à—É–¥ –Ω–µ!")
            await callback.answer()
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{escape_html(product.name)} - ${product.price}", callback_data=f"delete_product_{product.id}")]
                for product in products
            ]
        )
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ë–æ–∑–≥–∞—à—Ç –±–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω", callback_data="admin_panel")])

        await callback.message.answer("–ú–∞“≥—Å—É–ª–æ—Ç—Ä–æ –±–∞—Ä–æ–∏ “≥–∞–∑—Ñ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä admin_delete_product: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫—É—à –∫—É–Ω–µ–¥!")
        await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("delete_product_"))
async def confirm_delete_product(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer("–®—É–º–æ –¥–∞—Å—Ç—Ä–∞—Å—ó –±–∞!")
        await callback.answer()
        return

    try:
        product_id = int(callback.data.split("_")[-1])
        session = Session()
        product = session.query(Product).filter_by(id=product_id).first()
        if not product:
            session.close()
            await callback.message.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥!")
            await callback.answer()
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ë–∞–ª–µ, “≥–∞–∑—Ñ –∫—É–Ω", callback_data=f"confirm_delete_product_{product.id}")],
            [InlineKeyboardButton(text="–ù–µ, –±–µ–∫–æ—Ä –∫—É–Ω", callback_data="admin_delete_product")]
            ]
        )
        await callback.message.answer(
            f"–û–π —à—É–º–æ –º—É—Ç–º–∞–∏ “≥–∞—Å—Ç–µ–¥ , –∫–∏ –º–µ—Ö–æ“≥–µ–¥ –º–∞“≥—Å—É–ª–æ—Ç–∏ '{escape_html(product.name)}'-—Ä–æ —Ö–∞–∑—Ñ –∫—É–Ω–µ–¥? –ò–Ω –∞–º–∞–ª “≥–∞–º–∞–∏ —Å–∞–±–∞–¥“≥–æ –≤–∞ —Ñ–∞—Ä–º–æ–∏—à“≥–æ–∏ –º–∞—Ä–±—É—Ç–∞—Ä–∞—Ä–æ –Ω–∏–∑ —Ö–µ–∑–∑ –º–µ–∫—É–Ω–∞–¥!",
            reply_markup="HTML", parse_mode=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä confirm_delete_product: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫—É—à –∫—É–Ω–µ–¥!")
        await callback.answer()
        if 'session' in locals():
            session.close()

@dp.callback_query(lambda c: c.data.startswith("confirm_delete_product_"))
async def execute_delete_product(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer("–®—É–º–æ –¥–∞—Å—Ç—Ä–∞—Å–∏ –±–∞ –∏–Ω –º–µ–Ω—é –Ω–∞–¥–æ—Ä–µ–¥!")
        await callback.answer()
        return

    try:
        product_id = int(callback.data.split("_")[-1])
        session = Session()
        product = session.query(Product).filter_by(id=product_id).first()

        if not product:
            session.close()
            await callback.message.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥!")
            await callback.answer()
            return

        session.query(Cart).filter_by(product_id=product.id).delete()
        session.query(Order).filter_by(id=product_id).delete()
        session.delete(product)
        session.commit()
        session.close()

        await callback.message.answer(f"–ú–∞“≥—Å—É–ª–æ—Ç '{escape_html(product.name)}' <b>–±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç —Ö–∞–∑—Ñ —à—É–¥!</b>", parse_mode="HTML")
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="“≤–∞–∑—Ñ–∏ –º–∞“≥—Å—É–ª–æ—Ç–∏ –¥–∏–≥–∞—Ä", callback_data="admin_delete_product")],
                [InlineKeyboardButton(text="–ë–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω", callback_data="admin_panel")]
            ]
        )
        await callback.message.answer("–ê–º–∞–ª–∏ –Ω–∞–≤–±–∞—Ç:", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä execute_delete_product: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫—É—à –∫—É–Ω–µ–¥!")
        await callback.answer()
        if 'session' in locals():
            session.close()

# –ò–ª–æ–≤–∞–∏ —Ñ–∞—Ä–º–æ–∏—à
@dp.callback_query(lambda c: c.data == "admin_add_order")
async def admin_add_order(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.message.answer("–®—É–º–æ –¥–∞—Å—Ç—Ä–∞—Å–∏ –±–∞ –∏–Ω –º–µ–Ω—é –Ω–∞–¥–æ—Ä–µ–¥!")
        return
    try:
        session = Session()
        users = session.query(User).all()
        session.close()

        if not users:
            await callback.message.answer("–Ø–≥–æ–Ω –∫–æ—Ä–±–∞—Ä –º–∞–≤—à—É–¥!")
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{escape_html(user.first_name)} (@{escape_html(user.username or '')})", callback_data=f"admin_select_user_{user.telegram_id}")]
                for user in users
            ]
        )
        await callback.message.answer("–ö–æ—Ä–±–∞—Ä—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=keyboard)
        await state.set_state(AdminOrderForm.user_id)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä admin_add_order: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫—É—à –∫—É–Ω!")
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä admin_add_order: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫—É—à –∫—É–Ω!")
        await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("admin_select_user_"))
async def admin_select_user(callback: types.CallbackQuery, state: FSMContext):
    try:
        user_id = int(callback.data.split("_")[-1])
        await state.update_data(user_id=user_id)
        session = Session()
        products = session.query(Product).all()
        session.close()

        if not products:
            await callback.message.answer("–Ø–≥–æ–Ω –º–∞“≥—Å—É–ª–æ—Ç –º–∞–≤—à—É–¥!")
            await state.clear()
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{escape_html(product.name)} - ${product.price}", callback_data=f"admin_select_product_{product.id}")]
                for product in products
            ]
        )
        await callback.message.answer("–ú–∞“≥—Å—É–ª–æ—Ç—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=keyboard)
        await state.set_state(AdminOrderForm.product)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä admin_select_user: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫—É—à –∫—É–Ω–µ–¥!")
        await callback.answer()
        if 'session' in locals():
            session.close()

@dp.callback_query(lambda c: c.data.startswith("admin_select_product_"))
async def admin_select_product(callback: types.CallbackQuery, state: FSMContext):
    try:
        product_id = int(callback.data.split("_")[-1])
        await state.update_data(product_id=product_id)
        await callback.message.answer("–ú–∏“õ–¥–æ—Ä–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
        await state.set_state(AdminOrderForm.quantity)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä admin_select_product: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫—É—à –∫—É–Ω–µ–¥!")
        await callback.answer()

@dp.message(AdminOrderForm.quantity)
async def process_order_quantity(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–õ—É—Ç—Ñ–∞–Ω, –º–∏“õ–¥–æ—Ä–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, 2):")
        try:
            quantity = int(message.text)
            if quantity <= 0:
                raise ValueError("–ú–∏“õ–¥–æ—Ä –±–æ—è–¥ –º—É—Å–±–∞—Ç –±–æ—à–∞–¥!")
            data = await state.get_data()
            session = Session()
            product = session.query(Product).filter_by(id=data["product_id"]).first()
            if not product:
                await message.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥!")
                session.close()
                await state.clear()
                return
    
            order = Order(
                telegram_id=data["user_id"],
                product_id=data["product_id"],
                quantity=quantity,
                total=product.price * quantity
            )
            session.add(order)
            session.commit()
            session.close()
    
            await message.answer(
                f"–§–∞—Ä–º–æ–∏—à –±–∞—Ä–æ–∏ –∫–æ—Ä–±–∞—Ä –±–æ ID {data['user_id']} <b>–∏–ª–æ–≤–∞ —à—É–¥!</b>\n"
                f"–ú–∞“≥—Å—É–ª–æ—Ç: {escape_html(product.name)}, –ú–∏“õ–¥–æ—Ä: {quantity}, “≤–∞–º–∞–≥—É–π: ${product.price * quantity}",
                parse_mode="HTML"
            )
            await state.clear()
    
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ò–ª–æ–≤–∞–∏ —Ñ–∞—Ä–∏–º–æ–∏—à–∏ –¥–∏–≥–∞—Ä", callback_data="admin_add_order")],
                    [InlineKeyboardButton(text="–ë–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω", callback_data="admin_panel")]
                ]
            )
            await message.answer("–ê–º–∞–ª–∏ –Ω–∞–≤–±–∞—Ç:", reply_markup=keyboard)
    
        except Exception as e:
            logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_order_quantity: {str(e)}")
            await message.answer("–õ—É—Ç—Ñ–∞–Ω, –º—É–π–¥–æ—Ä–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, 2):")
            if 'session' in locals():
                session.close()

# –ù–∞–º–æ–∏—à–∏ —Ä”Ø–π—Ö–∞—Ç–∏ —Ñ–∞—Ä–º–æ–∏—à
@dp.callback_query(lambda c: c.data == "admin_view_orders")
async def admin_view_orders(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer("–®—É–º–æ –¥–∞—Å—Ç—Ä–∞—Å–∏ –±–∞ –∏–Ω –º–µ–Ω—é –Ω–∞–¥–æ—Ä–µ–¥!")
        return
    try:
        session = Session()
        orders = session.query(Order, User, Product).join(User).join(Product).all()
        session.close()

        if not orders:
            await callback.message.answer("<b>–Ø–≥–æ–Ω —Ñ–∞—Ä–º–æ–∏—à –º–∞–≤—à—É–¥!</b>", parse_mode="HTML")
            return

        response = "<b>–†”Ø–π—Ö–∞—Ç–∏ —Ñ–∞—Ä–º–æ—à:</b>\n\n"
        for order, user, product in orders:
            response += f"üì¶ –§–∞—Ä–º–æ–∏—à–∏ –Ω–∞–≤–§–∞—Ä–º–æ–∏—à #{order.id}\n"
            response += f"üë§ –ö–æ—Ä–±–∞—Ä: {escape_html(user.first_name)} (@{escape_html(user.username or '')})\n"
            response += f"üç´ –ú–∞“≥—Å—É–ª–æ—Ç“≥–æ: {escape_html(product.name)}\n"
            response += f"–ú–∏“õ–º–∏: {order.quantity}\n"
            response += f"üíµ “≤–∞–º–∞–≥”£: ${order.total}\n"
            response += f"üìÖ –°–∞–Ω–∞: {order.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n\n"

        await callback.message.answer(response, parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä admin_view_orders: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫—É—à–∏—à –∫—É–Ω!")
        await callback.answer()

# –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
@dp.callback_query(lambda c: c.data == "admin_add_category")
async def admin_add_category(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.message.answer("–®—É–º–æ –¥–∞—Å—Ç—Ä–∞—Å–∏ –±–∞ –∏–Ω –º–µ–Ω—é –Ω–∞–¥–æ—Ä–µ–¥!")
        await callback.answer()
        return
    try:
        await callback.message.answer("–ù–æ–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, –î–µ—Å–µ—Ä—Ç):")
        await state.set_state(AdminCategoryForm.name)
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä admin_add_category: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö, –ª—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫—É—à–∏—à –∫—É–Ω!")
        await callback.answer()

@dp.message(AdminCategoryForm.name)
async def process_category_name(message: types.Message, state: FSMContext):
    try:
        category_name = message.text.strip()
        if not category_name:
            await message.answer("–ù–æ–º –Ω–∞–±–æ—è–¥ —Ö–æ–ª–∏ –±–æ—à–∞–¥! –õ—É—Ç—Ñ–∞–Ω, –Ω–æ–º–∏ –¥—É—Ä—É—Å—Ç–æ –≤–æ—Ä–∏–¥:")
            return

        session = Session()
        existing_category = session.query(Category).filter_by(name=category_name).first()
        if existing_category:
            session.close()
            await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è–∏ '{escape_html(category_name)}' –∞–ª–ª–∞–∫–∞–π –º–∞–≤—à—É–¥!")
            await state.clear()
            return

        new_category = Category(name=category_name)
        session.add(new_category)
        session.commit()
        session.close()

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–≠“∑–æ–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏ –¥–∏–≥–∞—Ä", callback_data="admin_add_category")],
                [InlineKeyboardButton(text="–ë–∞ –ø–∞–Ω–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="admin_manage_categories")],
                [InlineKeyboardButton(text="–ë–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω", callback_data="admin_panel")]
            ]
        )
        await message.answer(f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è–∏ '{escape_html(category_name)}'</b> –±–æ–º—É–º–∞—Ñ–∞—Ñ–∏“õ–∏—è—Ç —ç—à–¥ —à—É–¥!", reply_markup=keyboard, parse_mode="HTML")
        await state.clear()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä process_category_name: {str(e)}")
        await message.answer(f"–•–æ—Ç–∞ —Ö–∞–Ω–≥–æ–º–∏ —ç–¥–∞–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {str(e)}")
        if 'session' in locals():
            session.close()
        await state.clear()

@dp.callback_query(lambda c: c.data == "admin_delete_category")
async def admin_delete_category(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer("–®—É–º–æ –¥–∞—Å—Ç—Ä–∞—à—ó!")
        await callback.answer()
        return
    try:
        session = Session()
        categories = session.query(Category).all()
        session.close()

        if not categories:
            await callback.message.answer("–Ø–≥–æ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–∞–≤—à—É–¥!")
            await callback.answer()
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=category.name, callback_data=f"delete_category_{category.id}")]
                for category in categories
            ]
        )
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ë–æ–∑–≥–∞—à–∏ –±–∞ –∏–¥–æ—Ä–æ—à–∞–∫–∏–Ω–∏", callback_data="admin_manage_categories")])

        await callback.message.answer("<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ä–æ –±–∞—Ä–æ–∏ —Ö–∞–∑—Ñ –∏–Ω—Ç–∏—Ö–æ–± –∫–µ—à—å:</b>", reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä admin_delete_category: {str(e)}")
        await callback.message.answer("–•–∞—Ç–æ —Ä—É—Ö, –ª—É—Ç—Ä–∞ –¥—É–±–∞—Ä–∞ –∫—É—à!")
        await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("delete_category_"))
async def confirm_delete_category(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer("–®—É–º–æ –¥–∞—Å—Ç—Ä–∞—à—ó!")
        await callback.answer()
        return
    try:
        category_id = int(callback.data.split("_")[-1])
        session = Session()
        category = session.query(Category).filter_by(id=category_id).first()

        if not category:
            session.close()
            await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —ë—Ñ—Ç –Ω–∞—à—É–¥!")
            await callback.answer()
            return

        products = session.query(Product).filter_by(category_id=category_id).all()
        for product in products:
            product.category_id = None

        session.delete(category)
        session.commit()
        session.close()

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–•–∞–∑—ã –∫–∞—Ç–µ–≥–æ—Ä–∏ –¥–∏–≥–∞—Ä—à–∏", callback_data="admin_delete_category")],
                [InlineKeyboardButton(text="–ë–∞ –∏–¥–æ—Ä–æ—à–∞–∫–∏–Ω–∏", callback_data="admin_manage_categories")],
                [InlineKeyboardButton(text="–ë–∞ –ø–∞–Ω–∞ –∞–¥–µ–ª–∏–Ω–∏", callback_data="admin_panel")]
            ]
        )
        await callback.message.answer(
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è–∏ '{escape_html(category.name)}'</b> —Ö–∞–∑ —Ç–∞ –≤–∞ –º—É—Ö–æ–¥–∞ –±–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏ –ø–µ—à–∏ –≥–æ–∑–∞—Ä–æ–∏ —à—É–¥–∞–Ω–¥!",
            reply_markup=keyboard, parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ –¥–∞—Ä confirm_delete_category: {str(e)}")
        await callback.message.answer(f"–•–∞—Ç–æ “≥–∞–Ω–≥–æ–º–∏ —Ö–∞–∑—Ñ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {str(e)}")
        await callback.answer()
        if 'session' in locals():
            session.close()



@dp.message(lambda message: message.text == "üè™ –ê–¥—Ä–µ—Å")
async def addresses(message: types.Message):
    address_text = (
        "üè™ –ú–æ–∏ –ø—É–Ω–∫—Ç—ã –ø—Ä–æ–¥–∞–∂:\n\n"
        "1. –î–æ–º –ø–µ—á–∞—Ç–∏ (—Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞)\n"
        "2. –ê—à–∞–Ω, 3 —ç—Ç–∞–∂ (—Ñ—É–¥–∫–æ—Ä—Ç)\n"
        "3. –°–∏—ë–º–∞ –ú–æ–ª, 2 —ç—Ç–∞–∂\n\n"
        "üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: 10:00-23:00"
    )
    await message.answer(address_text)

@dp.message(lambda message : message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message:  types.Message):
    contact_text = (
        "üì± –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
        "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤:\n"
        "+992 900-58-52-49\n"
        "+992 877-80-80-02\n\n"
        "üí¨ –ü–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!"
    )
    await message.answer(contact_text)




# –û“ì–æ–∑
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())